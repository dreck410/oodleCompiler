/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AIfStmt extends PIfStmt
{
    private TIf _if_;
    private PExpression _expression_;
    private TThen _then_;
    private final LinkedList<TNewLine> _newLine_ = new LinkedList<TNewLine>();
    private PStmtList _stmtList_;
    private PElseStmt _elseStmt_;
    private TEnd _end_;
    private TIf _endIf_;

    public AIfStmt()
    {
        // Constructor
    }

    public AIfStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") List<?> _newLine_,
        @SuppressWarnings("hiding") PStmtList _stmtList_,
        @SuppressWarnings("hiding") PElseStmt _elseStmt_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIf _endIf_)
    {
        // Constructor
        setIf(_if_);

        setExpression(_expression_);

        setThen(_then_);

        setNewLine(_newLine_);

        setStmtList(_stmtList_);

        setElseStmt(_elseStmt_);

        setEnd(_end_);

        setEndIf(_endIf_);

    }

    @Override
    public Object clone()
    {
        return new AIfStmt(
            cloneNode(this._if_),
            cloneNode(this._expression_),
            cloneNode(this._then_),
            cloneList(this._newLine_),
            cloneNode(this._stmtList_),
            cloneNode(this._elseStmt_),
            cloneNode(this._end_),
            cloneNode(this._endIf_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public LinkedList<TNewLine> getNewLine()
    {
        return this._newLine_;
    }

    public void setNewLine(List<?> list)
    {
        for(TNewLine e : this._newLine_)
        {
            e.parent(null);
        }
        this._newLine_.clear();

        for(Object obj_e : list)
        {
            TNewLine e = (TNewLine) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._newLine_.add(e);
        }
    }

    public PStmtList getStmtList()
    {
        return this._stmtList_;
    }

    public void setStmtList(PStmtList node)
    {
        if(this._stmtList_ != null)
        {
            this._stmtList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtList_ = node;
    }

    public PElseStmt getElseStmt()
    {
        return this._elseStmt_;
    }

    public void setElseStmt(PElseStmt node)
    {
        if(this._elseStmt_ != null)
        {
            this._elseStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseStmt_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIf getEndIf()
    {
        return this._endIf_;
    }

    public void setEndIf(TIf node)
    {
        if(this._endIf_ != null)
        {
            this._endIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._expression_)
            + toString(this._then_)
            + toString(this._newLine_)
            + toString(this._stmtList_)
            + toString(this._elseStmt_)
            + toString(this._end_)
            + toString(this._endIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._newLine_.remove(child))
        {
            return;
        }

        if(this._stmtList_ == child)
        {
            this._stmtList_ = null;
            return;
        }

        if(this._elseStmt_ == child)
        {
            this._elseStmt_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endIf_ == child)
        {
            this._endIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        for(ListIterator<TNewLine> i = this._newLine_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TNewLine) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._stmtList_ == oldChild)
        {
            setStmtList((PStmtList) newChild);
            return;
        }

        if(this._elseStmt_ == oldChild)
        {
            setElseStmt((PElseStmt) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endIf_ == oldChild)
        {
            setEndIf((TIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
