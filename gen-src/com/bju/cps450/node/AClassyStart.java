/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClassyStart extends PStart
{
    private PClassDecl _classDecl_;
    private final LinkedList<PClasses> _classes_ = new LinkedList<PClasses>();

    public AClassyStart()
    {
        // Constructor
    }

    public AClassyStart(
        @SuppressWarnings("hiding") PClassDecl _classDecl_,
        @SuppressWarnings("hiding") List<?> _classes_)
    {
        // Constructor
        setClassDecl(_classDecl_);

        setClasses(_classes_);

    }

    @Override
    public Object clone()
    {
        return new AClassyStart(
            cloneNode(this._classDecl_),
            cloneList(this._classes_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassyStart(this);
    }

    public PClassDecl getClassDecl()
    {
        return this._classDecl_;
    }

    public void setClassDecl(PClassDecl node)
    {
        if(this._classDecl_ != null)
        {
            this._classDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDecl_ = node;
    }

    public LinkedList<PClasses> getClasses()
    {
        return this._classes_;
    }

    public void setClasses(List<?> list)
    {
        for(PClasses e : this._classes_)
        {
            e.parent(null);
        }
        this._classes_.clear();

        for(Object obj_e : list)
        {
            PClasses e = (PClasses) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._classes_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classDecl_)
            + toString(this._classes_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classDecl_ == child)
        {
            this._classDecl_ = null;
            return;
        }

        if(this._classes_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classDecl_ == oldChild)
        {
            setClassDecl((PClassDecl) newChild);
            return;
        }

        for(ListIterator<PClasses> i = this._classes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClasses) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
