/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AArrayType extends PType
{
    private PType _type_;
    private TObrace _obrace_;
    private PExpression _expression_;
    private TCbrace _cbrace_;

    public AArrayType()
    {
        // Constructor
    }

    public AArrayType(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TObrace _obrace_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TCbrace _cbrace_)
    {
        // Constructor
        setType(_type_);

        setObrace(_obrace_);

        setExpression(_expression_);

        setCbrace(_cbrace_);

    }

    @Override
    public Object clone()
    {
        return new AArrayType(
            cloneNode(this._type_),
            cloneNode(this._obrace_),
            cloneNode(this._expression_),
            cloneNode(this._cbrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayType(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TObrace getObrace()
    {
        return this._obrace_;
    }

    public void setObrace(TObrace node)
    {
        if(this._obrace_ != null)
        {
            this._obrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._obrace_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TCbrace getCbrace()
    {
        return this._cbrace_;
    }

    public void setCbrace(TCbrace node)
    {
        if(this._cbrace_ != null)
        {
            this._cbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cbrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._obrace_)
            + toString(this._expression_)
            + toString(this._cbrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._obrace_ == child)
        {
            this._obrace_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._cbrace_ == child)
        {
            this._cbrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._obrace_ == oldChild)
        {
            setObrace((TObrace) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._cbrace_ == oldChild)
        {
            setCbrace((TCbrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
