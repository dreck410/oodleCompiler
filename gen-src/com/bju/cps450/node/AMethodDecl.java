/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDecl extends PMethodDecl
{
    private PMethodHead _methodHead_;
    private PMethodBody _methodBody_;
    private PEnd _end_;

    public AMethodDecl()
    {
        // Constructor
    }

    public AMethodDecl(
        @SuppressWarnings("hiding") PMethodHead _methodHead_,
        @SuppressWarnings("hiding") PMethodBody _methodBody_,
        @SuppressWarnings("hiding") PEnd _end_)
    {
        // Constructor
        setMethodHead(_methodHead_);

        setMethodBody(_methodBody_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDecl(
            cloneNode(this._methodHead_),
            cloneNode(this._methodBody_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDecl(this);
    }

    public PMethodHead getMethodHead()
    {
        return this._methodHead_;
    }

    public void setMethodHead(PMethodHead node)
    {
        if(this._methodHead_ != null)
        {
            this._methodHead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodHead_ = node;
    }

    public PMethodBody getMethodBody()
    {
        return this._methodBody_;
    }

    public void setMethodBody(PMethodBody node)
    {
        if(this._methodBody_ != null)
        {
            this._methodBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodBody_ = node;
    }

    public PEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(PEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._methodHead_)
            + toString(this._methodBody_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._methodHead_ == child)
        {
            this._methodHead_ = null;
            return;
        }

        if(this._methodBody_ == child)
        {
            this._methodBody_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._methodHead_ == oldChild)
        {
            setMethodHead((PMethodHead) newChild);
            return;
        }

        if(this._methodBody_ == oldChild)
        {
            setMethodBody((PMethodBody) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((PEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
