/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClasses extends PClasses
{
    private PClassDecl _classDecl_;
    private TNewLine _newLine_;

    public AClasses()
    {
        // Constructor
    }

    public AClasses(
        @SuppressWarnings("hiding") PClassDecl _classDecl_,
        @SuppressWarnings("hiding") TNewLine _newLine_)
    {
        // Constructor
        setClassDecl(_classDecl_);

        setNewLine(_newLine_);

    }

    @Override
    public Object clone()
    {
        return new AClasses(
            cloneNode(this._classDecl_),
            cloneNode(this._newLine_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClasses(this);
    }

    public PClassDecl getClassDecl()
    {
        return this._classDecl_;
    }

    public void setClassDecl(PClassDecl node)
    {
        if(this._classDecl_ != null)
        {
            this._classDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDecl_ = node;
    }

    public TNewLine getNewLine()
    {
        return this._newLine_;
    }

    public void setNewLine(TNewLine node)
    {
        if(this._newLine_ != null)
        {
            this._newLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newLine_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classDecl_)
            + toString(this._newLine_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classDecl_ == child)
        {
            this._classDecl_ = null;
            return;
        }

        if(this._newLine_ == child)
        {
            this._newLine_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classDecl_ == oldChild)
        {
            setClassDecl((PClassDecl) newChild);
            return;
        }

        if(this._newLine_ == oldChild)
        {
            setNewLine((TNewLine) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
