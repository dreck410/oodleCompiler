/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AElseStmt extends PElseStmt
{
    private TElse _else_;
    private final LinkedList<TNewLine> _newLine_ = new LinkedList<TNewLine>();
    private PStmtList _stmtList_;

    public AElseStmt()
    {
        // Constructor
    }

    public AElseStmt(
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") List<?> _newLine_,
        @SuppressWarnings("hiding") PStmtList _stmtList_)
    {
        // Constructor
        setElse(_else_);

        setNewLine(_newLine_);

        setStmtList(_stmtList_);

    }

    @Override
    public Object clone()
    {
        return new AElseStmt(
            cloneNode(this._else_),
            cloneList(this._newLine_),
            cloneNode(this._stmtList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseStmt(this);
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public LinkedList<TNewLine> getNewLine()
    {
        return this._newLine_;
    }

    public void setNewLine(List<?> list)
    {
        for(TNewLine e : this._newLine_)
        {
            e.parent(null);
        }
        this._newLine_.clear();

        for(Object obj_e : list)
        {
            TNewLine e = (TNewLine) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._newLine_.add(e);
        }
    }

    public PStmtList getStmtList()
    {
        return this._stmtList_;
    }

    public void setStmtList(PStmtList node)
    {
        if(this._stmtList_ != null)
        {
            this._stmtList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._else_)
            + toString(this._newLine_)
            + toString(this._stmtList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._newLine_.remove(child))
        {
            return;
        }

        if(this._stmtList_ == child)
        {
            this._stmtList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        for(ListIterator<TNewLine> i = this._newLine_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TNewLine) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._stmtList_ == oldChild)
        {
            setStmtList((PStmtList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
