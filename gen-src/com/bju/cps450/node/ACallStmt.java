/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class ACallStmt extends PCallStmt
{
    private PCaller _caller_;
    private TIdentifier _identifier_;
    private TOparen _oparen_;
    private PExprList _exprList_;
    private TCparen _cparen_;

    public ACallStmt()
    {
        // Constructor
    }

    public ACallStmt(
        @SuppressWarnings("hiding") PCaller _caller_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TOparen _oparen_,
        @SuppressWarnings("hiding") PExprList _exprList_,
        @SuppressWarnings("hiding") TCparen _cparen_)
    {
        // Constructor
        setCaller(_caller_);

        setIdentifier(_identifier_);

        setOparen(_oparen_);

        setExprList(_exprList_);

        setCparen(_cparen_);

    }

    @Override
    public Object clone()
    {
        return new ACallStmt(
            cloneNode(this._caller_),
            cloneNode(this._identifier_),
            cloneNode(this._oparen_),
            cloneNode(this._exprList_),
            cloneNode(this._cparen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACallStmt(this);
    }

    public PCaller getCaller()
    {
        return this._caller_;
    }

    public void setCaller(PCaller node)
    {
        if(this._caller_ != null)
        {
            this._caller_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caller_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TOparen getOparen()
    {
        return this._oparen_;
    }

    public void setOparen(TOparen node)
    {
        if(this._oparen_ != null)
        {
            this._oparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oparen_ = node;
    }

    public PExprList getExprList()
    {
        return this._exprList_;
    }

    public void setExprList(PExprList node)
    {
        if(this._exprList_ != null)
        {
            this._exprList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprList_ = node;
    }

    public TCparen getCparen()
    {
        return this._cparen_;
    }

    public void setCparen(TCparen node)
    {
        if(this._cparen_ != null)
        {
            this._cparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._caller_)
            + toString(this._identifier_)
            + toString(this._oparen_)
            + toString(this._exprList_)
            + toString(this._cparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._caller_ == child)
        {
            this._caller_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._oparen_ == child)
        {
            this._oparen_ = null;
            return;
        }

        if(this._exprList_ == child)
        {
            this._exprList_ = null;
            return;
        }

        if(this._cparen_ == child)
        {
            this._cparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._caller_ == oldChild)
        {
            setCaller((PCaller) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._oparen_ == oldChild)
        {
            setOparen((TOparen) newChild);
            return;
        }

        if(this._exprList_ == oldChild)
        {
            setExprList((PExprList) newChild);
            return;
        }

        if(this._cparen_ == oldChild)
        {
            setCparen((TCparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
