/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMethodHead extends PMethodHead
{
    private TIdentifier _identifier_;
    private TOparen _oparen_;
    private PArgDeclList _argDeclList_;
    private TCparen _cparen_;
    private PTypeDecl _typeDecl_;
    private TIs _is_;
    private final LinkedList<TNewLine> _newLine_ = new LinkedList<TNewLine>();
    private final LinkedList<PVarDecl> _varDecl_ = new LinkedList<PVarDecl>();

    public AMethodHead()
    {
        // Constructor
    }

    public AMethodHead(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TOparen _oparen_,
        @SuppressWarnings("hiding") PArgDeclList _argDeclList_,
        @SuppressWarnings("hiding") TCparen _cparen_,
        @SuppressWarnings("hiding") PTypeDecl _typeDecl_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") List<?> _newLine_,
        @SuppressWarnings("hiding") List<?> _varDecl_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setOparen(_oparen_);

        setArgDeclList(_argDeclList_);

        setCparen(_cparen_);

        setTypeDecl(_typeDecl_);

        setIs(_is_);

        setNewLine(_newLine_);

        setVarDecl(_varDecl_);

    }

    @Override
    public Object clone()
    {
        return new AMethodHead(
            cloneNode(this._identifier_),
            cloneNode(this._oparen_),
            cloneNode(this._argDeclList_),
            cloneNode(this._cparen_),
            cloneNode(this._typeDecl_),
            cloneNode(this._is_),
            cloneList(this._newLine_),
            cloneList(this._varDecl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodHead(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TOparen getOparen()
    {
        return this._oparen_;
    }

    public void setOparen(TOparen node)
    {
        if(this._oparen_ != null)
        {
            this._oparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oparen_ = node;
    }

    public PArgDeclList getArgDeclList()
    {
        return this._argDeclList_;
    }

    public void setArgDeclList(PArgDeclList node)
    {
        if(this._argDeclList_ != null)
        {
            this._argDeclList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argDeclList_ = node;
    }

    public TCparen getCparen()
    {
        return this._cparen_;
    }

    public void setCparen(TCparen node)
    {
        if(this._cparen_ != null)
        {
            this._cparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cparen_ = node;
    }

    public PTypeDecl getTypeDecl()
    {
        return this._typeDecl_;
    }

    public void setTypeDecl(PTypeDecl node)
    {
        if(this._typeDecl_ != null)
        {
            this._typeDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDecl_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public LinkedList<TNewLine> getNewLine()
    {
        return this._newLine_;
    }

    public void setNewLine(List<?> list)
    {
        for(TNewLine e : this._newLine_)
        {
            e.parent(null);
        }
        this._newLine_.clear();

        for(Object obj_e : list)
        {
            TNewLine e = (TNewLine) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._newLine_.add(e);
        }
    }

    public LinkedList<PVarDecl> getVarDecl()
    {
        return this._varDecl_;
    }

    public void setVarDecl(List<?> list)
    {
        for(PVarDecl e : this._varDecl_)
        {
            e.parent(null);
        }
        this._varDecl_.clear();

        for(Object obj_e : list)
        {
            PVarDecl e = (PVarDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varDecl_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._oparen_)
            + toString(this._argDeclList_)
            + toString(this._cparen_)
            + toString(this._typeDecl_)
            + toString(this._is_)
            + toString(this._newLine_)
            + toString(this._varDecl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._oparen_ == child)
        {
            this._oparen_ = null;
            return;
        }

        if(this._argDeclList_ == child)
        {
            this._argDeclList_ = null;
            return;
        }

        if(this._cparen_ == child)
        {
            this._cparen_ = null;
            return;
        }

        if(this._typeDecl_ == child)
        {
            this._typeDecl_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._newLine_.remove(child))
        {
            return;
        }

        if(this._varDecl_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._oparen_ == oldChild)
        {
            setOparen((TOparen) newChild);
            return;
        }

        if(this._argDeclList_ == oldChild)
        {
            setArgDeclList((PArgDeclList) newChild);
            return;
        }

        if(this._cparen_ == oldChild)
        {
            setCparen((TCparen) newChild);
            return;
        }

        if(this._typeDecl_ == oldChild)
        {
            setTypeDecl((PTypeDecl) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        for(ListIterator<TNewLine> i = this._newLine_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TNewLine) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVarDecl> i = this._varDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
