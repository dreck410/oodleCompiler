/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassyStart(AClassyStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALinesStart(ALinesStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClasses(AClasses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDecl(AClassDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassHead(AClassHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassInherits(AClassInherits node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassEnd(AClassEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodHead(AMethodHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodBody(AMethodBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodEnd(AMethodEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeTypeDecl(ATypeTypeDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprTypeDecl(AExprTypeDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgDeclList(AArgDeclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgList(AArgList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmtStmt(AIfStmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStmtStmt(AAssignStmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopStmtStmt(ALoopStmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStmtStmt(ACallStmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopStmt(ALoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseStmt(AElseStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaller(ACaller node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABraceExpr(ABraceExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtList(AStmtList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprList(AExprList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaExpr(ACommaExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALvl6Expression(ALvl6Expression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqExpressionLvl4(AGteqExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExpressionLvl4(AGtExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConcatExpressionLvl3(AConcatExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpressionLvl2(APlusExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpressionLvl2(AMinusExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyExpressionLvl1(AMultiplyExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideExpressionLvl1(ADivideExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpressionLvl0(ANotExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPosExpressionLvl0(APosExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegExpressionLvl0(ANegExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl0(APassExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntExpressionLast(AIntExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdExpressionLast(AIdExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLitExpressionLast(AStringLitExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExpressionLast(ATrueExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExpressionLast(AFalseExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullExpressionLast(ANullExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMeExpressionLast(AMeExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthExpressionLast(AParenthExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewExpressionLast(ANewExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExpressionLast(AArrayExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodcallExpressionLast(AMethodcallExpressionLast node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewLine(TNewLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLineContinue(TLineContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClass(TClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMe(TMe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLoop(TLoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInherits(TInherits node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalAnd(TLogicalAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalOr(TLogicalOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalNot(TLogicalNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLit(TStringLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringConcat(TStringConcat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiply(TMultiply node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOparen(TOparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCparen(TCparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTObrace(TObrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCbrace(TCbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssignment(TAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnterminatedString(TUnterminatedString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIllegalString(TIllegalString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIllegal(TIllegal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
