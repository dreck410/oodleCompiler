/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAClassyStart(AClassyStart node);
    void caseASpaceStart(ASpaceStart node);
    void caseASingleStart(ASingleStart node);
    void caseAClassDecl(AClassDecl node);
    void caseAClassHead(AClassHead node);
    void caseAClassInherits(AClassInherits node);
    void caseAClassBody(AClassBody node);
    void caseAClasses(AClasses node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAMethodHead(AMethodHead node);
    void caseAMethodBody(AMethodBody node);
    void caseAEnd(AEnd node);
    void caseATypeTypeDecl(ATypeTypeDecl node);
    void caseAExprTypeDecl(AExprTypeDecl node);
    void caseAArgDeclList(AArgDeclList node);
    void caseAArgList(AArgList node);
    void caseAIfStmtStmt(AIfStmtStmt node);
    void caseAAssignStmtStmt(AAssignStmtStmt node);
    void caseALoopStmtStmt(ALoopStmtStmt node);
    void caseACallStmtStmt(ACallStmtStmt node);
    void caseACallStmt(ACallStmt node);
    void caseALoopStmt(ALoopStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAElseStmt(AElseStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseACaller(ACaller node);
    void caseABraceExpr(ABraceExpr node);
    void caseAStmtList(AStmtList node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseAStringType(AStringType node);
    void caseAIdType(AIdType node);
    void caseAArrayType(AArrayType node);
    void caseAExprList(AExprList node);
    void caseACommaExpr(ACommaExpr node);
    void caseALvl6Expression(ALvl6Expression node);
    void caseAOrExpressionLvl6(AOrExpressionLvl6 node);
    void caseAPassExpressionLvl6(APassExpressionLvl6 node);
    void caseAAndExpressionLvl5(AAndExpressionLvl5 node);
    void caseAPassExpressionLvl5(APassExpressionLvl5 node);
    void caseAEqExpressionLvl4(AEqExpressionLvl4 node);
    void caseAGteqExpressionLvl4(AGteqExpressionLvl4 node);
    void caseAGtExpressionLvl4(AGtExpressionLvl4 node);
    void caseAPassExpressionLvl4(APassExpressionLvl4 node);
    void caseAConcatExpressionLvl3(AConcatExpressionLvl3 node);
    void caseAPassExpressionLvl3(APassExpressionLvl3 node);
    void caseAPlusExpressionLvl2(APlusExpressionLvl2 node);
    void caseAMinusExpressionLvl2(AMinusExpressionLvl2 node);
    void caseAPassExpressionLvl2(APassExpressionLvl2 node);
    void caseAMultiplyExpressionLvl1(AMultiplyExpressionLvl1 node);
    void caseADivideExpressionLvl1(ADivideExpressionLvl1 node);
    void caseAPassExpressionLvl1(APassExpressionLvl1 node);
    void caseANotExpressionLvl0(ANotExpressionLvl0 node);
    void caseAPosExpressionLvl0(APosExpressionLvl0 node);
    void caseANegExpressionLvl0(ANegExpressionLvl0 node);
    void caseAPassExpressionLvl0(APassExpressionLvl0 node);
    void caseAIntExpressionLast(AIntExpressionLast node);
    void caseAIdExpressionLast(AIdExpressionLast node);
    void caseAStringLitExpressionLast(AStringLitExpressionLast node);
    void caseATrueExpressionLast(ATrueExpressionLast node);
    void caseAFalseExpressionLast(AFalseExpressionLast node);
    void caseANullExpressionLast(ANullExpressionLast node);
    void caseAMeExpressionLast(AMeExpressionLast node);
    void caseAParenthExpressionLast(AParenthExpressionLast node);
    void caseANewExpressionLast(ANewExpressionLast node);
    void caseAArrayExpressionLast(AArrayExpressionLast node);
    void caseAMethodcallExpressionLast(AMethodcallExpressionLast node);
    void caseAMethodCallExpr(AMethodCallExpr node);

    void caseTNewLine(TNewLine node);
    void caseTLineContinue(TLineContinue node);
    void caseTSpace(TSpace node);
    void caseTComment(TComment node);
    void caseTTab(TTab node);
    void caseTString(TString node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTClass(TClass node);
    void caseTWhile(TWhile node);
    void caseTNull(TNull node);
    void caseTNew(TNew node);
    void caseTMe(TMe node);
    void caseTLoop(TLoop node);
    void caseTIs(TIs node);
    void caseTInt(TInt node);
    void caseTInherits(TInherits node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTLogicalNot(TLogicalNot node);
    void caseTStringLit(TStringLit node);
    void caseTInteger(TInteger node);
    void caseTStringConcat(TStringConcat node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTDivide(TDivide node);
    void caseTMultiply(TMultiply node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTEq(TEq node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTOparen(TOparen node);
    void caseTCparen(TCparen node);
    void caseTObrace(TObrace node);
    void caseTCbrace(TCbrace node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTAssignment(TAssignment node);
    void caseTIdentifier(TIdentifier node);
    void caseTUnterminatedString(TUnterminatedString node);
    void caseTIllegalString(TIllegalString node);
    void caseTIllegal(TIllegal node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
