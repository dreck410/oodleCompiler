/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAClassDecl(AClassDecl node);
    void caseAClassInherits(AClassInherits node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAArg(AArg node);
    void caseAMethod(AMethod node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseABooleanType(ABooleanType node);
    void caseACustomType(ACustomType node);
    void caseAIfStatement(AIfStatement node);
    void caseALoopStatement(ALoopStatement node);
    void caseACallStatement(ACallStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAAssignee(AAssignee node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAEqExpression(AEqExpression node);
    void caseAGteqExpression(AGteqExpression node);
    void caseAGtExpression(AGtExpression node);
    void caseAMultiplyExpression(AMultiplyExpression node);
    void caseADivideExpression(ADivideExpression node);
    void caseAConcatExpression(AConcatExpression node);
    void caseANotExpression(ANotExpression node);
    void caseANegExpression(ANegExpression node);
    void caseAPosExpression(APosExpression node);
    void caseANewExpression(ANewExpression node);
    void caseAMethodCallExpression(AMethodCallExpression node);
    void caseAIntExpression(AIntExpression node);
    void caseAStringLitExpression(AStringLitExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseANullExpression(ANullExpression node);
    void caseAMeExpression(AMeExpression node);
    void caseAArrayExpression(AArrayExpression node);
    void caseAIdExpression(AIdExpression node);

    void caseTNewLine(TNewLine node);
    void caseTLineContinue(TLineContinue node);
    void caseTSpace(TSpace node);
    void caseTComment(TComment node);
    void caseTTab(TTab node);
    void caseTString(TString node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTClass(TClass node);
    void caseTWhile(TWhile node);
    void caseTNull(TNull node);
    void caseTNew(TNew node);
    void caseTMe(TMe node);
    void caseTLoop(TLoop node);
    void caseTIs(TIs node);
    void caseTInt(TInt node);
    void caseTInherits(TInherits node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTLogicalNot(TLogicalNot node);
    void caseTStringLit(TStringLit node);
    void caseTInteger(TInteger node);
    void caseTStringConcat(TStringConcat node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTDivide(TDivide node);
    void caseTMultiply(TMultiply node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTEq(TEq node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTOparen(TOparen node);
    void caseTCparen(TCparen node);
    void caseTObrace(TObrace node);
    void caseTCbrace(TCbrace node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTAssignment(TAssignment node);
    void caseTIdentifier(TIdentifier node);
    void caseTUnterminatedString(TUnterminatedString node);
    void caseTIllegalString(TIllegalString node);
    void caseTIllegal(TIllegal node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
