/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAClassyStart(AClassyStart node)
    {
        defaultIn(node);
    }

    public void outAClassyStart(AClassyStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassyStart(AClassyStart node)
    {
        inAClassyStart(node);
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        {
            List<PClasses> copy = new ArrayList<PClasses>(node.getClasses());
            for(PClasses e : copy)
            {
                e.apply(this);
            }
        }
        outAClassyStart(node);
    }

    public void inASpaceStart(ASpaceStart node)
    {
        defaultIn(node);
    }

    public void outASpaceStart(ASpaceStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpaceStart(ASpaceStart node)
    {
        inASpaceStart(node);
        if(node.getNewLine() != null)
        {
            node.getNewLine().apply(this);
        }
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        outASpaceStart(node);
    }

    public void inAClassDecl(AClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassDecl(AClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDecl(AClassDecl node)
    {
        inAClassDecl(node);
        if(node.getClassHead() != null)
        {
            node.getClassHead().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAClassDecl(node);
    }

    public void inAClassHead(AClassHead node)
    {
        defaultIn(node);
    }

    public void outAClassHead(AClassHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassHead(AClassHead node)
    {
        inAClassHead(node);
        if(node.getCls() != null)
        {
            node.getCls().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getClassInherits() != null)
        {
            node.getClassInherits().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outAClassHead(node);
    }

    public void inAClassInherits(AClassInherits node)
    {
        defaultIn(node);
    }

    public void outAClassInherits(AClassInherits node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInherits(AClassInherits node)
    {
        inAClassInherits(node);
        if(node.getInherits() != null)
        {
            node.getInherits().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassInherits(node);
    }

    public void inAClassBody(AClassBody node)
    {
        defaultIn(node);
    }

    public void outAClassBody(AClassBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        inAClassBody(node);
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethodDecl());
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAClassBody(node);
    }

    public void inAClasses(AClasses node)
    {
        defaultIn(node);
    }

    public void outAClasses(AClasses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasses(AClasses node)
    {
        inAClasses(node);
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        if(node.getNewLine() != null)
        {
            node.getNewLine().apply(this);
        }
        outAClasses(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outAVarDecl(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getMethodHead() != null)
        {
            node.getMethodHead().apply(this);
        }
        if(node.getMethodBody() != null)
        {
            node.getMethodBody().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAMethodHead(AMethodHead node)
    {
        defaultIn(node);
    }

    public void outAMethodHead(AMethodHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodHead(AMethodHead node)
    {
        inAMethodHead(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getOparen() != null)
        {
            node.getOparen().apply(this);
        }
        if(node.getArgDeclList() != null)
        {
            node.getArgDeclList().apply(this);
        }
        if(node.getCparen() != null)
        {
            node.getCparen().apply(this);
        }
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAMethodHead(node);
    }

    public void inAMethodBody(AMethodBody node)
    {
        defaultIn(node);
    }

    public void outAMethodBody(AMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodBody(AMethodBody node)
    {
        inAMethodBody(node);
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        outAMethodBody(node);
    }

    public void inAEnd(AEnd node)
    {
        defaultIn(node);
    }

    public void outAEnd(AEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnd(AEnd node)
    {
        inAEnd(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outAEnd(node);
    }

    public void inATypeTypeDecl(ATypeTypeDecl node)
    {
        defaultIn(node);
    }

    public void outATypeTypeDecl(ATypeTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeTypeDecl(ATypeTypeDecl node)
    {
        inATypeTypeDecl(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeTypeDecl(node);
    }

    public void inAExprTypeDecl(AExprTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAExprTypeDecl(AExprTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTypeDecl(AExprTypeDecl node)
    {
        inAExprTypeDecl(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExprTypeDecl(node);
    }

    public void inAArgDeclList(AArgDeclList node)
    {
        defaultIn(node);
    }

    public void outAArgDeclList(AArgDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgDeclList(AArgDeclList node)
    {
        inAArgDeclList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        {
            List<PArgList> copy = new ArrayList<PArgList>(node.getArgList());
            for(PArgList e : copy)
            {
                e.apply(this);
            }
        }
        outAArgDeclList(node);
    }

    public void inAArgList(AArgList node)
    {
        defaultIn(node);
    }

    public void outAArgList(AArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgList(AArgList node)
    {
        inAArgList(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        outAArgList(node);
    }

    public void inAIfStmtStmt(AIfStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmtStmt(AIfStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtStmt(AIfStmtStmt node)
    {
        inAIfStmtStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outAIfStmtStmt(node);
    }

    public void inAAssignStmtStmt(AAssignStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmtStmt(AAssignStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmtStmt(AAssignStmtStmt node)
    {
        inAAssignStmtStmt(node);
        if(node.getAssignStmt() != null)
        {
            node.getAssignStmt().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outAAssignStmtStmt(node);
    }

    public void inALoopStmtStmt(ALoopStmtStmt node)
    {
        defaultIn(node);
    }

    public void outALoopStmtStmt(ALoopStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStmtStmt(ALoopStmtStmt node)
    {
        inALoopStmtStmt(node);
        if(node.getLoopStmt() != null)
        {
            node.getLoopStmt().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outALoopStmtStmt(node);
    }

    public void inACallStmtStmt(ACallStmtStmt node)
    {
        defaultIn(node);
    }

    public void outACallStmtStmt(ACallStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStmtStmt(ACallStmtStmt node)
    {
        inACallStmtStmt(node);
        if(node.getCallStmt() != null)
        {
            node.getCallStmt().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        outACallStmtStmt(node);
    }

    public void inACallStmt(ACallStmt node)
    {
        defaultIn(node);
    }

    public void outACallStmt(ACallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        inACallStmt(node);
        if(node.getCaller() != null)
        {
            node.getCaller().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getOparen() != null)
        {
            node.getOparen().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getCparen() != null)
        {
            node.getCparen().apply(this);
        }
        outACallStmt(node);
    }

    public void inALoopStmt(ALoopStmt node)
    {
        defaultIn(node);
    }

    public void outALoopStmt(ALoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStmt(ALoopStmt node)
    {
        inALoopStmt(node);
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEndloop() != null)
        {
            node.getEndloop().apply(this);
        }
        outALoopStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEndIf() != null)
        {
            node.getEndIf().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAElseStmt(AElseStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStmt(AElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmt(AElseStmt node)
    {
        inAElseStmt(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        {
            List<TNewLine> copy = new ArrayList<TNewLine>(node.getNewLine());
            for(TNewLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        outAElseStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PBraceExpr> copy = new ArrayList<PBraceExpr>(node.getBraceExpr());
            for(PBraceExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inACaller(ACaller node)
    {
        defaultIn(node);
    }

    public void outACaller(ACaller node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaller(ACaller node)
    {
        inACaller(node);
        if(node.getExpressionLast() != null)
        {
            node.getExpressionLast().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outACaller(node);
    }

    public void inABraceExpr(ABraceExpr node)
    {
        defaultIn(node);
    }

    public void outABraceExpr(ABraceExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABraceExpr(ABraceExpr node)
    {
        inABraceExpr(node);
        if(node.getObrace() != null)
        {
            node.getObrace().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCbrace() != null)
        {
            node.getCbrace().apply(this);
        }
        outABraceExpr(node);
    }

    public void inAStmtList(AStmtList node)
    {
        defaultIn(node);
    }

    public void outAStmtList(AStmtList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtList(AStmtList node)
    {
        inAStmtList(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAStmtList(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABoolType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAIdType(AIdType node)
    {
        defaultIn(node);
    }

    public void outAIdType(AIdType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        inAIdType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getObrace() != null)
        {
            node.getObrace().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCbrace() != null)
        {
            node.getCbrace().apply(this);
        }
        outAArrayType(node);
    }

    public void inAExprList(AExprList node)
    {
        defaultIn(node);
    }

    public void outAExprList(AExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprList(AExprList node)
    {
        inAExprList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PCommaExpr> copy = new ArrayList<PCommaExpr>(node.getCommaExpr());
            for(PCommaExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAExprList(node);
    }

    public void inACommaExpr(ACommaExpr node)
    {
        defaultIn(node);
    }

    public void outACommaExpr(ACommaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaExpr(ACommaExpr node)
    {
        inACommaExpr(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaExpr(node);
    }

    public void inALvl6Expression(ALvl6Expression node)
    {
        defaultIn(node);
    }

    public void outALvl6Expression(ALvl6Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvl6Expression(ALvl6Expression node)
    {
        inALvl6Expression(node);
        if(node.getExpressionLvl6() != null)
        {
            node.getExpressionLvl6().apply(this);
        }
        outALvl6Expression(node);
    }

    public void inAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        inAOrExpressionLvl6(node);
        if(node.getExpressionLvl6() != null)
        {
            node.getExpressionLvl6().apply(this);
        }
        if(node.getLogicalOr() != null)
        {
            node.getLogicalOr().apply(this);
        }
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        outAOrExpressionLvl6(node);
    }

    public void inAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        inAPassExpressionLvl6(node);
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        outAPassExpressionLvl6(node);
    }

    public void inAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultIn(node);
    }

    public void outAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        inAAndExpressionLvl5(node);
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        if(node.getLogicalAnd() != null)
        {
            node.getLogicalAnd().apply(this);
        }
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outAAndExpressionLvl5(node);
    }

    public void inAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        inAPassExpressionLvl5(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outAPassExpressionLvl5(node);
    }

    public void inAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        inAEqExpressionLvl4(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqExpressionLvl4(node);
    }

    public void inAGteqExpressionLvl4(AGteqExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAGteqExpressionLvl4(AGteqExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqExpressionLvl4(AGteqExpressionLvl4 node)
    {
        inAGteqExpressionLvl4(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGteqExpressionLvl4(node);
    }

    public void inAGtExpressionLvl4(AGtExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAGtExpressionLvl4(AGtExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpressionLvl4(AGtExpressionLvl4 node)
    {
        inAGtExpressionLvl4(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGtExpressionLvl4(node);
    }

    public void inAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        inAPassExpressionLvl4(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outAPassExpressionLvl4(node);
    }

    public void inAConcatExpressionLvl3(AConcatExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outAConcatExpressionLvl3(AConcatExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatExpressionLvl3(AConcatExpressionLvl3 node)
    {
        inAConcatExpressionLvl3(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        if(node.getStringConcat() != null)
        {
            node.getStringConcat().apply(this);
        }
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        outAConcatExpressionLvl3(node);
    }

    public void inAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        inAPassExpressionLvl3(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        outAPassExpressionLvl3(node);
    }

    public void inAPlusExpressionLvl2(APlusExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpressionLvl2(APlusExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpressionLvl2(APlusExpressionLvl2 node)
    {
        inAPlusExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAPlusExpressionLvl2(node);
    }

    public void inAMinusExpressionLvl2(AMinusExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAMinusExpressionLvl2(AMinusExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpressionLvl2(AMinusExpressionLvl2 node)
    {
        inAMinusExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAMinusExpressionLvl2(node);
    }

    public void inAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        inAPassExpressionLvl2(node);
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAPassExpressionLvl2(node);
    }

    public void inAMultiplyExpressionLvl1(AMultiplyExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAMultiplyExpressionLvl1(AMultiplyExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyExpressionLvl1(AMultiplyExpressionLvl1 node)
    {
        inAMultiplyExpressionLvl1(node);
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outAMultiplyExpressionLvl1(node);
    }

    public void inADivideExpressionLvl1(ADivideExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outADivideExpressionLvl1(ADivideExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExpressionLvl1(ADivideExpressionLvl1 node)
    {
        inADivideExpressionLvl1(node);
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outADivideExpressionLvl1(node);
    }

    public void inAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        inAPassExpressionLvl1(node);
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outAPassExpressionLvl1(node);
    }

    public void inANotExpressionLvl0(ANotExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outANotExpressionLvl0(ANotExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpressionLvl0(ANotExpressionLvl0 node)
    {
        inANotExpressionLvl0(node);
        if(node.getLogicalNot() != null)
        {
            node.getLogicalNot().apply(this);
        }
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outANotExpressionLvl0(node);
    }

    public void inAPosExpressionLvl0(APosExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAPosExpressionLvl0(APosExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpressionLvl0(APosExpressionLvl0 node)
    {
        inAPosExpressionLvl0(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outAPosExpressionLvl0(node);
    }

    public void inANegExpressionLvl0(ANegExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outANegExpressionLvl0(ANegExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpressionLvl0(ANegExpressionLvl0 node)
    {
        inANegExpressionLvl0(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outANegExpressionLvl0(node);
    }

    public void inAPassExpressionLvl0(APassExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl0(APassExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl0(APassExpressionLvl0 node)
    {
        inAPassExpressionLvl0(node);
        if(node.getExpressionLast() != null)
        {
            node.getExpressionLast().apply(this);
        }
        outAPassExpressionLvl0(node);
    }

    public void inAIntExpressionLast(AIntExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAIntExpressionLast(AIntExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpressionLast(AIntExpressionLast node)
    {
        inAIntExpressionLast(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntExpressionLast(node);
    }

    public void inAIdExpressionLast(AIdExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAIdExpressionLast(AIdExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpressionLast(AIdExpressionLast node)
    {
        inAIdExpressionLast(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExpressionLast(node);
    }

    public void inAStringLitExpressionLast(AStringLitExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAStringLitExpressionLast(AStringLitExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLitExpressionLast(AStringLitExpressionLast node)
    {
        inAStringLitExpressionLast(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
        }
        outAStringLitExpressionLast(node);
    }

    public void inATrueExpressionLast(ATrueExpressionLast node)
    {
        defaultIn(node);
    }

    public void outATrueExpressionLast(ATrueExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpressionLast(ATrueExpressionLast node)
    {
        inATrueExpressionLast(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpressionLast(node);
    }

    public void inAFalseExpressionLast(AFalseExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAFalseExpressionLast(AFalseExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpressionLast(AFalseExpressionLast node)
    {
        inAFalseExpressionLast(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpressionLast(node);
    }

    public void inANullExpressionLast(ANullExpressionLast node)
    {
        defaultIn(node);
    }

    public void outANullExpressionLast(ANullExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpressionLast(ANullExpressionLast node)
    {
        inANullExpressionLast(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullExpressionLast(node);
    }

    public void inAMeExpressionLast(AMeExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAMeExpressionLast(AMeExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeExpressionLast(AMeExpressionLast node)
    {
        inAMeExpressionLast(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeExpressionLast(node);
    }

    public void inAParenthExpressionLast(AParenthExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAParenthExpressionLast(AParenthExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthExpressionLast(AParenthExpressionLast node)
    {
        inAParenthExpressionLast(node);
        if(node.getOparen() != null)
        {
            node.getOparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCparen() != null)
        {
            node.getCparen().apply(this);
        }
        outAParenthExpressionLast(node);
    }

    public void inANewExpressionLast(ANewExpressionLast node)
    {
        defaultIn(node);
    }

    public void outANewExpressionLast(ANewExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExpressionLast(ANewExpressionLast node)
    {
        inANewExpressionLast(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANewExpressionLast(node);
    }

    public void inAArrayExpressionLast(AArrayExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAArrayExpressionLast(AArrayExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpressionLast(AArrayExpressionLast node)
    {
        inAArrayExpressionLast(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PBraceExpr> copy = new ArrayList<PBraceExpr>(node.getBraceExpr());
            for(PBraceExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAArrayExpressionLast(node);
    }

    public void inAMethodcallExpressionLast(AMethodcallExpressionLast node)
    {
        defaultIn(node);
    }

    public void outAMethodcallExpressionLast(AMethodcallExpressionLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcallExpressionLast(AMethodcallExpressionLast node)
    {
        inAMethodcallExpressionLast(node);
        if(node.getMethodCallExpr() != null)
        {
            node.getMethodCallExpr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getOparen() != null)
        {
            node.getOparen().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getCparen() != null)
        {
            node.getCparen().apply(this);
        }
        outAMethodcallExpressionLast(node);
    }

    public void inAMethodCallExpr(AMethodCallExpr node)
    {
        defaultIn(node);
    }

    public void outAMethodCallExpr(AMethodCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        inAMethodCallExpr(node);
        if(node.getExpressionLast() != null)
        {
            node.getExpressionLast().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMethodCallExpr(node);
    }
}
