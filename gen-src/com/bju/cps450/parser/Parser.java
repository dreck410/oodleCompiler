/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.parser;

import com.bju.cps450.lexer.*;
import com.bju.cps450.node.*;
import com.bju.cps450.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAclassystart1$11Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAclassystart2$11Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ASpaceStart */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAclasshead1ClassHead */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAclasshead2ClassHead */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AClassInherits */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAclassbody1ClassBody */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAclassbody2ClassBody */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AAclassbody3ClassBody */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AAclassbody4ClassBody */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce A11Classes */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAvardecl1VarDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AAvardecl2VarDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce A1MethodDecl */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AAmethodhead1MethodHead */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce AAmethodhead2MethodHead */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce AAmethodhead3MethodHead */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AAmethodhead4MethodHead */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AAmethodhead5MethodHead */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AAmethodhead6MethodHead */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AAmethodhead7MethodHead */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAmethodhead8MethodHead */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce AMethodBody */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ATypeTypeDecl */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AExprTypeDecl */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list);
            }
            break;
            case 25: /* reduce AAargdecllist1ArgDeclList */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AAargdecllist2ArgDeclList */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce AArgList */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce AIfStmtStmt */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce AAssignStmtStmt */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce ALoopStmtStmt */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce ACallStmtStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AAcallstmt1CallStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list);
            }
            break;
            case 33: /* reduce AAcallstmt2$1CallStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list);
            }
            break;
            case 37: /* reduce AElseStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list);
            }
            break;
            case 38: /* reduce AAassignstmt1AssignStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce AAassignstmt2AssignStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce ABraceExpr */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list);
            }
            break;
            case 41: /* reduce AAstmtlist1StmtList */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list);
            }
            break;
            case 42: /* reduce AAstmtlist2StmtList */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AIntType */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce ABoolType */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce AStringType */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list);
            }
            break;
            case 46: /* reduce AIdType */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list);
            }
            break;
            case 47: /* reduce AAarraytype1Type */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce AAarraytype2Type */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list);
            }
            break;
            case 49: /* reduce AAexprlist1ExprList */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list);
            }
            break;
            case 50: /* reduce AAexprlist2ExprList */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list);
            }
            break;
            case 51: /* reduce ACommaExpr */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list);
            }
            break;
            case 52: /* reduce ALvl6Expression */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AOrExpressionLvl6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list);
            }
            break;
            case 54: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new54();
                push(goTo(24), list);
            }
            break;
            case 55: /* reduce AAndExpressionLvl5 */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list);
            }
            break;
            case 56: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list);
            }
            break;
            case 57: /* reduce AEqExpressionLvl4 */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list);
            }
            break;
            case 58: /* reduce AGteqExpressionLvl4 */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list);
            }
            break;
            case 59: /* reduce AGtExpressionLvl4 */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list);
            }
            break;
            case 60: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list);
            }
            break;
            case 61: /* reduce AConcatExpressionLvl3 */
            {
                ArrayList<Object> list = new61();
                push(goTo(27), list);
            }
            break;
            case 62: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new62();
                push(goTo(27), list);
            }
            break;
            case 63: /* reduce APlusExpressionLvl2 */
            {
                ArrayList<Object> list = new63();
                push(goTo(28), list);
            }
            break;
            case 64: /* reduce AMinusExpressionLvl2 */
            {
                ArrayList<Object> list = new64();
                push(goTo(28), list);
            }
            break;
            case 65: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new65();
                push(goTo(28), list);
            }
            break;
            case 66: /* reduce AMultiplyExpressionLvl1 */
            {
                ArrayList<Object> list = new66();
                push(goTo(29), list);
            }
            break;
            case 67: /* reduce ADivideExpressionLvl1 */
            {
                ArrayList<Object> list = new67();
                push(goTo(29), list);
            }
            break;
            case 68: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new68();
                push(goTo(29), list);
            }
            break;
            case 69: /* reduce ANotExpressionLvl0 */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list);
            }
            break;
            case 70: /* reduce APosExpressionLvl0 */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list);
            }
            break;
            case 71: /* reduce ANegExpressionLvl0 */
            {
                ArrayList<Object> list = new71();
                push(goTo(30), list);
            }
            break;
            case 72: /* reduce APassExpressionLvl0 */
            {
                ArrayList<Object> list = new72();
                push(goTo(30), list);
            }
            break;
            case 73: /* reduce AIntExpressionLast */
            {
                ArrayList<Object> list = new73();
                push(goTo(31), list);
            }
            break;
            case 74: /* reduce AIdExpressionLast */
            {
                ArrayList<Object> list = new74();
                push(goTo(31), list);
            }
            break;
            case 75: /* reduce AStringLitExpressionLast */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list);
            }
            break;
            case 76: /* reduce ATrueExpressionLast */
            {
                ArrayList<Object> list = new76();
                push(goTo(31), list);
            }
            break;
            case 77: /* reduce AFalseExpressionLast */
            {
                ArrayList<Object> list = new77();
                push(goTo(31), list);
            }
            break;
            case 78: /* reduce ANullExpressionLast */
            {
                ArrayList<Object> list = new78();
                push(goTo(31), list);
            }
            break;
            case 79: /* reduce AMeExpressionLast */
            {
                ArrayList<Object> list = new79();
                push(goTo(31), list);
            }
            break;
            case 80: /* reduce AParenthExpressionLast */
            {
                ArrayList<Object> list = new80();
                push(goTo(31), list);
            }
            break;
            case 81: /* reduce ANewExpressionLast */
            {
                ArrayList<Object> list = new81();
                push(goTo(31), list);
            }
            break;
            case 82: /* reduce AArrayExpressionLast */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce AAmethodcallexpressionlast1ExpressionLast */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list);
            }
            break;
            case 84: /* reduce AAmethodcallexpressionlast2$1ExpressionLast */
            {
                ArrayList<Object> list = new84();
                push(goTo(31), list);
            }
            break;
            case 85: /* reduce ATerminal$Classes */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list);
            }
            break;
            case 86: /* reduce ANonTerminal$Classes */
            {
                ArrayList<Object> list = new86();
                push(goTo(32), list);
            }
            break;
            case 87: /* reduce ATerminal$NewLine */
            {
                ArrayList<Object> list = new87();
                push(goTo(33), list);
            }
            break;
            case 88: /* reduce ANonTerminal$NewLine */
            {
                ArrayList<Object> list = new88();
                push(goTo(33), list);
            }
            break;
            case 89: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list);
            }
            break;
            case 90: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new90();
                push(goTo(34), list);
            }
            break;
            case 91: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list);
            }
            break;
            case 92: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new92();
                push(goTo(35), list);
            }
            break;
            case 93: /* reduce ATerminal$ArgList */
            {
                ArrayList<Object> list = new93();
                push(goTo(36), list);
            }
            break;
            case 94: /* reduce ANonTerminal$ArgList */
            {
                ArrayList<Object> list = new94();
                push(goTo(36), list);
            }
            break;
            case 95: /* reduce ATerminal$BraceExpr */
            {
                ArrayList<Object> list = new95();
                push(goTo(37), list);
            }
            break;
            case 96: /* reduce ANonTerminal$BraceExpr */
            {
                ArrayList<Object> list = new96();
                push(goTo(37), list);
            }
            break;
            case 97: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new97();
                push(goTo(38), list);
            }
            break;
            case 98: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new98();
                push(goTo(38), list);
            }
            break;
            case 99: /* reduce ATerminal$CommaExpr */
            {
                ArrayList<Object> list = new99();
                push(goTo(39), list);
            }
            break;
            case 100: /* reduce ANonTerminal$CommaExpr */
            {
                ArrayList<Object> list = new100();
                push(goTo(39), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAclassystart1$11Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        {
            // Block
        PClassHead pclassheadNode3;
        PClassBody pclassbodyNode4;
        PEnd pendNode5;
        pclassheadNode3 = (PClassHead)nodeArrayList1.get(0);
        pclassbodyNode4 = (PClassBody)nodeArrayList2.get(0);
        {
            // Block
        TEnd tendNode6;
        TIdentifier tidentifierNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        tendNode6 = (TEnd)nodeArrayList3.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pendNode5 = new AEnd(tendNode6, tidentifierNode7, listNode9);
        }

        pclassdeclNode2 = new AClassDecl(pclassheadNode3, pclassbodyNode4, pendNode5);
        }
        {
            // Block
        }

        pstartNode1 = new AClassyStart(pclassdeclNode2, listNode10);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAclassystart2$11Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        {
            // Block
        PClassHead pclassheadNode3;
        PClassBody pclassbodyNode4;
        PEnd pendNode5;
        pclassheadNode3 = (PClassHead)nodeArrayList1.get(0);
        pclassbodyNode4 = (PClassBody)nodeArrayList2.get(0);
        {
            // Block
        TEnd tendNode6;
        TIdentifier tidentifierNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        tendNode6 = (TEnd)nodeArrayList3.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pendNode5 = new AEnd(tendNode6, tidentifierNode7, listNode9);
        }

        pclassdeclNode2 = new AClassDecl(pclassheadNode3, pclassbodyNode4, pendNode5);
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pstartNode1 = new AClassyStart(pclassdeclNode2, listNode11);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASpaceStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TNewLine tnewlineNode2;
        PStart pstartNode3;
        tnewlineNode2 = (TNewLine)nodeArrayList1.get(0);
        pstartNode3 = (PStart)nodeArrayList2.get(0);

        pstartNode1 = new ASpaceStart(tnewlineNode2, pstartNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAclasshead1ClassHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassHead pclassheadNode1;
        {
            // Block
        TClass tclassNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tclassNode2 = (TClass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassheadNode1 = new AClassHead(tclassNode2, tidentifierNode3, null, tisNode5, listNode7);
        }
	nodeList.add(pclassheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAclasshead2ClassHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassHead pclassheadNode1;
        {
            // Block
        TClass tclassNode2;
        TIdentifier tidentifierNode3;
        PClassInherits pclassinheritsNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tclassNode2 = (TClass)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pclassinheritsNode4 = (PClassInherits)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassheadNode1 = new AClassHead(tclassNode2, tidentifierNode3, pclassinheritsNode4, tisNode5, listNode7);
        }
	nodeList.add(pclassheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AClassInherits */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassInherits pclassinheritsNode1;
        {
            // Block
        TInherits tinheritsNode2;
        TFrom tfromNode3;
        TIdentifier tidentifierNode4;
        tinheritsNode2 = (TInherits)nodeArrayList1.get(0);
        tfromNode3 = (TFrom)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pclassinheritsNode1 = new AClassInherits(tinheritsNode2, tfromNode3, tidentifierNode4);
        }
	nodeList.add(pclassinheritsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAclassbody1ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2, listNode3);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAclassbody2ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode3, listNode4);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclassbody3ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode2, listNode4);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassbody4ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3, listNode5);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce A11Classes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClasses pclassesNode1;
        {
            // Block
        PClassDecl pclassdeclNode2;
        TNewLine tnewlineNode10;
        {
            // Block
        PClassHead pclassheadNode3;
        PClassBody pclassbodyNode4;
        PEnd pendNode5;
        pclassheadNode3 = (PClassHead)nodeArrayList1.get(0);
        pclassbodyNode4 = (PClassBody)nodeArrayList2.get(0);
        {
            // Block
        TEnd tendNode6;
        TIdentifier tidentifierNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        tendNode6 = (TEnd)nodeArrayList3.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pendNode5 = new AEnd(tendNode6, tidentifierNode7, listNode9);
        }

        pclassdeclNode2 = new AClassDecl(pclassheadNode3, pclassbodyNode4, pendNode5);
        }
        tnewlineNode10 = (TNewLine)nodeArrayList6.get(0);

        pclassesNode1 = new AClasses(pclassdeclNode2, tnewlineNode10);
        }
	nodeList.add(pclassesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PTypeDecl ptypedeclNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypeDecl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypedeclNode3, null, listNode6);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PTypeDecl ptypedeclNode3;
        PTypeDecl ptypedeclNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypeDecl)nodeArrayList2.get(0);
        ptypedeclNode4 = (PTypeDecl)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypedeclNode3, ptypedeclNode4, listNode6);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce A1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        PMethodHead pmethodheadNode2;
        PMethodBody pmethodbodyNode3;
        PEnd pendNode4;
        pmethodheadNode2 = (PMethodHead)nodeArrayList1.get(0);
        pmethodbodyNode3 = (PMethodBody)nodeArrayList2.get(0);
        {
            // Block
        TEnd tendNode5;
        TIdentifier tidentifierNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        tendNode5 = (TEnd)nodeArrayList3.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pendNode4 = new AEnd(tendNode5, tidentifierNode6, listNode8);
        }

        pmethoddeclNode1 = new AMethodDecl(pmethodheadNode2, pmethodbodyNode3, pendNode4);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAmethodhead1MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TCparen tcparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        tcparenNode5 = (TCparen)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, null, tcparenNode5, null, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAmethodhead2MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        PArgDeclList pargdecllistNode4;
        TCparen tcparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        pargdecllistNode4 = (PArgDeclList)nodeArrayList3.get(0);
        tcparenNode5 = (TCparen)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, pargdecllistNode4, tcparenNode5, null, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAmethodhead3MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TCparen tcparenNode5;
        PTypeDecl ptypedeclNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        tcparenNode5 = (TCparen)nodeArrayList3.get(0);
        ptypedeclNode6 = (PTypeDecl)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, null, tcparenNode5, ptypedeclNode6, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAmethodhead4MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        PArgDeclList pargdecllistNode4;
        TCparen tcparenNode5;
        PTypeDecl ptypedeclNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        pargdecllistNode4 = (PArgDeclList)nodeArrayList3.get(0);
        tcparenNode5 = (TCparen)nodeArrayList4.get(0);
        ptypedeclNode6 = (PTypeDecl)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, pargdecllistNode4, tcparenNode5, ptypedeclNode6, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAmethodhead5MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TCparen tcparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        tcparenNode5 = (TCparen)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, null, tcparenNode5, null, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethodhead6MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        PArgDeclList pargdecllistNode4;
        TCparen tcparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        pargdecllistNode4 = (PArgDeclList)nodeArrayList3.get(0);
        tcparenNode5 = (TCparen)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, pargdecllistNode4, tcparenNode5, null, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethodhead7MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TCparen tcparenNode5;
        PTypeDecl ptypedeclNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        tcparenNode5 = (TCparen)nodeArrayList3.get(0);
        ptypedeclNode6 = (PTypeDecl)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, null, tcparenNode5, ptypedeclNode6, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethodhead8MethodHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHead pmethodheadNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOparen toparenNode3;
        PArgDeclList pargdecllistNode4;
        TCparen tcparenNode5;
        PTypeDecl ptypedeclNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode3 = (TOparen)nodeArrayList2.get(0);
        pargdecllistNode4 = (PArgDeclList)nodeArrayList3.get(0);
        tcparenNode5 = (TCparen)nodeArrayList4.get(0);
        ptypedeclNode6 = (PTypeDecl)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheadNode1 = new AMethodHead(tidentifierNode2, toparenNode3, pargdecllistNode4, tcparenNode5, ptypedeclNode6, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMethodBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodBody pmethodbodyNode1;
        {
            // Block
        TBegin tbeginNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStmtList pstmtlistNode5;
        tbeginNode2 = (TBegin)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstmtlistNode5 = (PStmtList)nodeArrayList3.get(0);

        pmethodbodyNode1 = new AMethodBody(tbeginNode2, listNode4, pstmtlistNode5);
        }
	nodeList.add(pmethodbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATypeTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TColon tcolonNode2;
        PType ptypeNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        ptypedeclNode1 = new ATypeTypeDecl(tcolonNode2, ptypeNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AExprTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TAssignment tassignmentNode2;
        PExpression pexpressionNode3;
        tassignmentNode2 = (TAssignment)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ptypedeclNode1 = new AExprTypeDecl(tassignmentNode2, pexpressionNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAargdecllist1ArgDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgDeclList pargdecllistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PTypeDecl ptypedeclNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypeDecl)nodeArrayList2.get(0);
        {
            // Block
        }

        pargdecllistNode1 = new AArgDeclList(tidentifierNode2, ptypedeclNode3, listNode4);
        }
	nodeList.add(pargdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAargdecllist2ArgDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgDeclList pargdecllistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PTypeDecl ptypedeclNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypeDecl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargdecllistNode1 = new AArgDeclList(tidentifierNode2, ptypedeclNode3, listNode5);
        }
	nodeList.add(pargdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        TIdentifier tidentifierNode3;
        PTypeDecl ptypedeclNode4;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ptypedeclNode4 = (PTypeDecl)nodeArrayList3.get(0);

        parglistNode1 = new AArgList(tsemicolonNode2, tidentifierNode3, ptypedeclNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIfStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new AIfStmtStmt(pifstmtNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAssignStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PAssignStmt passignstmtNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        passignstmtNode2 = (PAssignStmt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new AAssignStmtStmt(passignstmtNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALoopStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLoopStmt ploopstmtNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ploopstmtNode2 = (PLoopStmt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new ALoopStmtStmt(ploopstmtNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ACallStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCallStmt pcallstmtNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pcallstmtNode2 = (PCallStmt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new ACallStmtStmt(pcallstmtNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAcallstmt1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallStmt pcallstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TOparen toparenNode4;
        PExprList pexprlistNode5;
        TCparen tcparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode4 = (TOparen)nodeArrayList2.get(0);
        pexprlistNode5 = (PExprList)nodeArrayList3.get(0);
        tcparenNode6 = (TCparen)nodeArrayList4.get(0);

        pcallstmtNode1 = new ACallStmt(null, tidentifierNode3, toparenNode4, pexprlistNode5, tcparenNode6);
        }
	nodeList.add(pcallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAcallstmt2$1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallStmt pcallstmtNode1;
        {
            // Block
        PCaller pcallerNode2;
        TIdentifier tidentifierNode5;
        TOparen toparenNode6;
        PExprList pexprlistNode7;
        TCparen tcparenNode8;
        {
            // Block
        PExpressionLast pexpressionlastNode3;
        TDot tdotNode4;
        pexpressionlastNode3 = (PExpressionLast)nodeArrayList1.get(0);
        tdotNode4 = (TDot)nodeArrayList2.get(0);

        pcallerNode2 = new ACaller(pexpressionlastNode3, tdotNode4);
        }
        tidentifierNode5 = (TIdentifier)nodeArrayList3.get(0);
        toparenNode6 = (TOparen)nodeArrayList4.get(0);
        pexprlistNode7 = (PExprList)nodeArrayList5.get(0);
        tcparenNode8 = (TCparen)nodeArrayList6.get(0);

        pcallstmtNode1 = new ACallStmt(pcallerNode2, tidentifierNode5, toparenNode6, pexprlistNode7, tcparenNode8);
        }
	nodeList.add(pcallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopStmt ploopstmtNode1;
        {
            // Block
        TLoop tloopNode2;
        TWhile twhileNode3;
        PExpression pexpressionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStmtList pstmtlistNode7;
        TEnd tendNode8;
        TLoop tloopNode9;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstmtlistNode7 = (PStmtList)nodeArrayList5.get(0);
        tendNode8 = (TEnd)nodeArrayList6.get(0);
        tloopNode9 = (TLoop)nodeArrayList7.get(0);

        ploopstmtNode1 = new ALoopStmt(tloopNode2, twhileNode3, pexpressionNode4, listNode6, pstmtlistNode7, tendNode8, tloopNode9);
        }
	nodeList.add(ploopstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStmtList pstmtlistNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TEnd tendNode9;
        TIf tifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstmtlistNode7 = (PStmtList)nodeArrayList5.get(0);
        tendNode9 = (TEnd)nodeArrayList6.get(0);
        tifNode10 = (TIf)nodeArrayList7.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, pexpressionNode3, tthenNode4, listNode6, pstmtlistNode7, null, tendNode9, tifNode10);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStmtList pstmtlistNode7;
        PElseStmt pelsestmtNode8;
        TEnd tendNode9;
        TIf tifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstmtlistNode7 = (PStmtList)nodeArrayList5.get(0);
        pelsestmtNode8 = (PElseStmt)nodeArrayList6.get(0);
        tendNode9 = (TEnd)nodeArrayList7.get(0);
        tifNode10 = (TIf)nodeArrayList8.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, pexpressionNode3, tthenNode4, listNode6, pstmtlistNode7, pelsestmtNode8, tendNode9, tifNode10);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStmt pelsestmtNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStmtList pstmtlistNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstmtlistNode5 = (PStmtList)nodeArrayList3.get(0);

        pelsestmtNode1 = new AElseStmt(telseNode2, listNode4, pstmtlistNode5);
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAassignstmt1AssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignStmt passignstmtNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TAssignment tassignmentNode4;
        PExpression pexpressionNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        tassignmentNode4 = (TAssignment)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        passignstmtNode1 = new AAssignStmt(tidentifierNode2, listNode3, tassignmentNode4, pexpressionNode5);
        }
	nodeList.add(passignstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAassignstmt2AssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignStmt passignstmtNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TAssignment tassignmentNode5;
        PExpression pexpressionNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tassignmentNode5 = (TAssignment)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        passignstmtNode1 = new AAssignStmt(tidentifierNode2, listNode4, tassignmentNode5, pexpressionNode6);
        }
	nodeList.add(passignstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABraceExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBraceExpr pbraceexprNode1;
        {
            // Block
        TObrace tobraceNode2;
        PExpression pexpressionNode3;
        TCbrace tcbraceNode4;
        tobraceNode2 = (TObrace)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tcbraceNode4 = (TCbrace)nodeArrayList3.get(0);

        pbraceexprNode1 = new ABraceExpr(tobraceNode2, pexpressionNode3, tcbraceNode4);
        }
	nodeList.add(pbraceexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAstmtlist1StmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmtList pstmtlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstmtlistNode1 = new AStmtList(listNode2);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAstmtlist2StmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtList pstmtlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtlistNode1 = new AStmtList(listNode3);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAarraytype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        TObrace tobraceNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TCbrace tcbraceNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tobraceNode3 = (TObrace)nodeArrayList2.get(0);
        tcbraceNode5 = (TCbrace)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2, tobraceNode3, null, tcbraceNode5);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAarraytype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        TObrace tobraceNode3;
        PExpression pexpressionNode4;
        TCbrace tcbraceNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tobraceNode3 = (TObrace)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcbraceNode5 = (TCbrace)nodeArrayList4.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2, tobraceNode3, pexpressionNode4, tcbraceNode5);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pexprlistNode1 = new AExprList(pexpressionNode2, listNode3);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprlistNode1 = new AExprList(pexpressionNode2, listNode4);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaExpr pcommaexprNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcommaexprNode1 = new ACommaExpr(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcommaexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ALvl6Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpressionLvl6 pexpressionlvl6Node2;
        pexpressionlvl6Node2 = (PExpressionLvl6)nodeArrayList1.get(0);

        pexpressionNode1 = new ALvl6Expression(pexpressionlvl6Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AOrExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl6 pexpressionlvl6Node1;
        {
            // Block
        PExpressionLvl6 pexpressionlvl6Node2;
        TLogicalOr tlogicalorNode3;
        PExpressionLvl5 pexpressionlvl5Node4;
        pexpressionlvl6Node2 = (PExpressionLvl6)nodeArrayList1.get(0);
        tlogicalorNode3 = (TLogicalOr)nodeArrayList2.get(0);
        pexpressionlvl5Node4 = (PExpressionLvl5)nodeArrayList3.get(0);

        pexpressionlvl6Node1 = new AOrExpressionLvl6(pexpressionlvl6Node2, tlogicalorNode3, pexpressionlvl5Node4);
        }
	nodeList.add(pexpressionlvl6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl6 pexpressionlvl6Node1;
        {
            // Block
        PExpressionLvl5 pexpressionlvl5Node2;
        pexpressionlvl5Node2 = (PExpressionLvl5)nodeArrayList1.get(0);

        pexpressionlvl6Node1 = new APassExpressionLvl6(pexpressionlvl5Node2);
        }
	nodeList.add(pexpressionlvl6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAndExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl5 pexpressionlvl5Node1;
        {
            // Block
        PExpressionLvl5 pexpressionlvl5Node2;
        TLogicalAnd tlogicalandNode3;
        PExpressionLvl4 pexpressionlvl4Node4;
        pexpressionlvl5Node2 = (PExpressionLvl5)nodeArrayList1.get(0);
        tlogicalandNode3 = (TLogicalAnd)nodeArrayList2.get(0);
        pexpressionlvl4Node4 = (PExpressionLvl4)nodeArrayList3.get(0);

        pexpressionlvl5Node1 = new AAndExpressionLvl5(pexpressionlvl5Node2, tlogicalandNode3, pexpressionlvl4Node4);
        }
	nodeList.add(pexpressionlvl5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl5 pexpressionlvl5Node1;
        {
            // Block
        PExpressionLvl4 pexpressionlvl4Node2;
        pexpressionlvl4Node2 = (PExpressionLvl4)nodeArrayList1.get(0);

        pexpressionlvl5Node1 = new APassExpressionLvl5(pexpressionlvl4Node2);
        }
	nodeList.add(pexpressionlvl5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TEq teqNode3;
        PExpressionLvl3 pexpressionlvl3Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpressionlvl3Node4 = (PExpressionLvl3)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AEqExpressionLvl4(pexpressionlvl3Node2, teqNode3, pexpressionlvl3Node4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AGteqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TGteq tgteqNode3;
        PExpressionLvl3 pexpressionlvl3Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tgteqNode3 = (TGteq)nodeArrayList2.get(0);
        pexpressionlvl3Node4 = (PExpressionLvl3)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AGteqExpressionLvl4(pexpressionlvl3Node2, tgteqNode3, pexpressionlvl3Node4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AGtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TGt tgtNode3;
        PExpressionLvl3 pexpressionlvl3Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        pexpressionlvl3Node4 = (PExpressionLvl3)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AGtExpressionLvl4(pexpressionlvl3Node2, tgtNode3, pexpressionlvl3Node4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);

        pexpressionlvl4Node1 = new APassExpressionLvl4(pexpressionlvl3Node2);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AConcatExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TStringConcat tstringconcatNode3;
        PExpressionLvl2 pexpressionlvl2Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tstringconcatNode3 = (TStringConcat)nodeArrayList2.get(0);
        pexpressionlvl2Node4 = (PExpressionLvl2)nodeArrayList3.get(0);

        pexpressionlvl3Node1 = new AConcatExpressionLvl3(pexpressionlvl3Node2, tstringconcatNode3, pexpressionlvl2Node4);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);

        pexpressionlvl3Node1 = new APassExpressionLvl3(pexpressionlvl2Node2);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce APlusExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        TPlus tplusNode3;
        PExpressionLvl1 pexpressionlvl1Node4;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpressionlvl1Node4 = (PExpressionLvl1)nodeArrayList3.get(0);

        pexpressionlvl2Node1 = new APlusExpressionLvl2(pexpressionlvl2Node2, tplusNode3, pexpressionlvl1Node4);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMinusExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        TMinus tminusNode3;
        PExpressionLvl1 pexpressionlvl1Node4;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpressionlvl1Node4 = (PExpressionLvl1)nodeArrayList3.get(0);

        pexpressionlvl2Node1 = new AMinusExpressionLvl2(pexpressionlvl2Node2, tminusNode3, pexpressionlvl1Node4);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl1 pexpressionlvl1Node2;
        pexpressionlvl1Node2 = (PExpressionLvl1)nodeArrayList1.get(0);

        pexpressionlvl2Node1 = new APassExpressionLvl2(pexpressionlvl1Node2);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AMultiplyExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        PExpressionLvl1 pexpressionlvl1Node2;
        TMultiply tmultiplyNode3;
        PExpressionLvl0 pexpressionlvl0Node4;
        pexpressionlvl1Node2 = (PExpressionLvl1)nodeArrayList1.get(0);
        tmultiplyNode3 = (TMultiply)nodeArrayList2.get(0);
        pexpressionlvl0Node4 = (PExpressionLvl0)nodeArrayList3.get(0);

        pexpressionlvl1Node1 = new AMultiplyExpressionLvl1(pexpressionlvl1Node2, tmultiplyNode3, pexpressionlvl0Node4);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ADivideExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        PExpressionLvl1 pexpressionlvl1Node2;
        TDivide tdivideNode3;
        PExpressionLvl0 pexpressionlvl0Node4;
        pexpressionlvl1Node2 = (PExpressionLvl1)nodeArrayList1.get(0);
        tdivideNode3 = (TDivide)nodeArrayList2.get(0);
        pexpressionlvl0Node4 = (PExpressionLvl0)nodeArrayList3.get(0);

        pexpressionlvl1Node1 = new ADivideExpressionLvl1(pexpressionlvl1Node2, tdivideNode3, pexpressionlvl0Node4);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        PExpressionLvl0 pexpressionlvl0Node2;
        pexpressionlvl0Node2 = (PExpressionLvl0)nodeArrayList1.get(0);

        pexpressionlvl1Node1 = new APassExpressionLvl1(pexpressionlvl0Node2);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANotExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TLogicalNot tlogicalnotNode2;
        PExpressionLvl0 pexpressionlvl0Node3;
        tlogicalnotNode2 = (TLogicalNot)nodeArrayList1.get(0);
        pexpressionlvl0Node3 = (PExpressionLvl0)nodeArrayList2.get(0);

        pexpressionlvl0Node1 = new ANotExpressionLvl0(tlogicalnotNode2, pexpressionlvl0Node3);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce APosExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TPlus tplusNode2;
        PExpressionLvl0 pexpressionlvl0Node3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pexpressionlvl0Node3 = (PExpressionLvl0)nodeArrayList2.get(0);

        pexpressionlvl0Node1 = new APosExpressionLvl0(tplusNode2, pexpressionlvl0Node3);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANegExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TMinus tminusNode2;
        PExpressionLvl0 pexpressionlvl0Node3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexpressionlvl0Node3 = (PExpressionLvl0)nodeArrayList2.get(0);

        pexpressionlvl0Node1 = new ANegExpressionLvl0(tminusNode2, pexpressionlvl0Node3);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APassExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        PExpressionLast pexpressionlastNode2;
        pexpressionlastNode2 = (PExpressionLast)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new APassExpressionLvl0(pexpressionlastNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AIntExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexpressionlastNode1 = new AIntExpressionLast(tintegerNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AIdExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionlastNode1 = new AIdExpressionLast(tidentifierNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AStringLitExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TStringLit tstringlitNode2;
        tstringlitNode2 = (TStringLit)nodeArrayList1.get(0);

        pexpressionlastNode1 = new AStringLitExpressionLast(tstringlitNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATrueExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionlastNode1 = new ATrueExpressionLast(ttrueNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AFalseExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionlastNode1 = new AFalseExpressionLast(tfalseNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANullExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pexpressionlastNode1 = new ANullExpressionLast(tnullNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AMeExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpressionlastNode1 = new AMeExpressionLast(tmeNode2);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AParenthExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TOparen toparenNode2;
        PExpression pexpressionNode3;
        TCparen tcparenNode4;
        toparenNode2 = (TOparen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tcparenNode4 = (TCparen)nodeArrayList3.get(0);

        pexpressionlastNode1 = new AParenthExpressionLast(toparenNode2, pexpressionNode3, tcparenNode4);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANewExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TNew tnewNode2;
        PType ptypeNode3;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pexpressionlastNode1 = new ANewExpressionLast(tnewNode2, ptypeNode3);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AArrayExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionlastNode1 = new AArrayExpressionLast(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAmethodcallexpressionlast1ExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TOparen toparenNode4;
        PExprList pexprlistNode5;
        TCparen tcparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        toparenNode4 = (TOparen)nodeArrayList2.get(0);
        pexprlistNode5 = (PExprList)nodeArrayList3.get(0);
        tcparenNode6 = (TCparen)nodeArrayList4.get(0);

        pexpressionlastNode1 = new AMethodcallExpressionLast(null, tidentifierNode3, toparenNode4, pexprlistNode5, tcparenNode6);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAmethodcallexpressionlast2$1ExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLast pexpressionlastNode1;
        {
            // Block
        PMethodCallExpr pmethodcallexprNode2;
        TIdentifier tidentifierNode5;
        TOparen toparenNode6;
        PExprList pexprlistNode7;
        TCparen tcparenNode8;
        {
            // Block
        PExpressionLast pexpressionlastNode3;
        TDot tdotNode4;
        pexpressionlastNode3 = (PExpressionLast)nodeArrayList1.get(0);
        tdotNode4 = (TDot)nodeArrayList2.get(0);

        pmethodcallexprNode2 = new AMethodCallExpr(pexpressionlastNode3, tdotNode4);
        }
        tidentifierNode5 = (TIdentifier)nodeArrayList3.get(0);
        toparenNode6 = (TOparen)nodeArrayList4.get(0);
        pexprlistNode7 = (PExprList)nodeArrayList5.get(0);
        tcparenNode8 = (TCparen)nodeArrayList6.get(0);

        pexpressionlastNode1 = new AMethodcallExpressionLast(pmethodcallexprNode2, tidentifierNode5, toparenNode6, pexprlistNode7, tcparenNode8);
        }
	nodeList.add(pexpressionlastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$Classes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClasses pclassesNode1;
        pclassesNode1 = (PClasses)nodeArrayList1.get(0);
	if(pclassesNode1 != null)
	{
	  listNode2.add(pclassesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$Classes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClasses pclassesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassesNode2 = (PClasses)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassesNode2 != null)
	{
	  listNode3.add(pclassesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$NewLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNewLine tnewlineNode1;
        tnewlineNode1 = (TNewLine)nodeArrayList1.get(0);
	if(tnewlineNode1 != null)
	{
	  listNode2.add(tnewlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$NewLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNewLine tnewlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnewlineNode2 = (TNewLine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnewlineNode2 != null)
	{
	  listNode3.add(tnewlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATerminal$ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgList parglistNode1;
        parglistNode1 = (PArgList)nodeArrayList1.get(0);
	if(parglistNode1 != null)
	{
	  listNode2.add(parglistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANonTerminal$ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgList parglistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parglistNode2 = (PArgList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parglistNode2 != null)
	{
	  listNode3.add(parglistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ATerminal$BraceExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBraceExpr pbraceexprNode1;
        pbraceexprNode1 = (PBraceExpr)nodeArrayList1.get(0);
	if(pbraceexprNode1 != null)
	{
	  listNode2.add(pbraceexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ANonTerminal$BraceExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBraceExpr pbraceexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbraceexprNode2 = (PBraceExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbraceexprNode2 != null)
	{
	  listNode3.add(pbraceexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ATerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaExpr pcommaexprNode1;
        pcommaexprNode1 = (PCommaExpr)nodeArrayList1.get(0);
	if(pcommaexprNode1 != null)
	{
	  listNode2.add(pcommaexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ANonTerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaExpr pcommaexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaexprNode2 = (PCommaExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexprNode2 != null)
	{
	  listNode3.add(pcommaexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {6, SHIFT, 2}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {6, SHIFT, 2}, },
			{{-1, ERROR, 2}, {42, SHIFT, 6}, },
			{{-1, ERROR, 3}, {46, ACCEPT, -1}, },
			{{-1, REDUCE, 6}, {42, SHIFT, 7}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 6}, {12, SHIFT, 14}, {14, SHIFT, 15}, },
			{{-1, ERROR, 7}, {33, SHIFT, 17}, {35, SHIFT, 18}, {41, SHIFT, 19}, },
			{{-1, ERROR, 8}, {17, SHIFT, 21}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 11}, {19, SHIFT, 22}, },
			{{-1, REDUCE, 7}, {42, SHIFT, 7}, },
			{{-1, REDUCE, 8}, {42, SHIFT, 26}, },
			{{-1, ERROR, 14}, {0, SHIFT, 28}, },
			{{-1, ERROR, 15}, {5, SHIFT, 30}, },
			{{-1, ERROR, 16}, {12, SHIFT, 31}, },
			{{-1, ERROR, 17}, {1, SHIFT, 32}, {13, SHIFT, 33}, {18, SHIFT, 34}, {42, SHIFT, 35}, },
			{{-1, ERROR, 18}, {36, SHIFT, 37}, {42, SHIFT, 38}, },
			{{-1, ERROR, 19}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 20}, {0, SHIFT, 28}, {33, SHIFT, 17}, {41, SHIFT, 19}, },
			{{-1, ERROR, 21}, {42, SHIFT, 63}, },
			{{-1, ERROR, 22}, {0, SHIFT, 28}, },
			{{-1, ERROR, 23}, {17, SHIFT, 65}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 9}, {42, SHIFT, 26}, },
			{{-1, ERROR, 26}, {35, SHIFT, 18}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 66}, },
			{{-1, ERROR, 30}, {42, SHIFT, 67}, },
			{{-1, ERROR, 31}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 23}, {37, SHIFT, 69}, },
			{{-1, ERROR, 37}, {12, SHIFT, 70}, {33, SHIFT, 17}, {41, SHIFT, 19}, },
			{{-1, ERROR, 38}, {33, SHIFT, 17}, {41, SHIFT, 19}, },
			{{-1, ERROR, 39}, {36, SHIFT, 73}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 43}, {1, SHIFT, 32}, {13, SHIFT, 33}, {18, SHIFT, 34}, {42, SHIFT, 35}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 45}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 48}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 49}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 50}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 74}, {35, SHIFT, 79}, {37, SHIFT, 80}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 52}, {21, SHIFT, 83}, },
			{{-1, REDUCE, 54}, {20, SHIFT, 84}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 60}, {25, SHIFT, 85}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 62}, {26, SHIFT, 89}, {27, SHIFT, 90}, },
			{{-1, REDUCE, 65}, {28, SHIFT, 91}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 72}, {34, SHIFT, 93}, },
			{{-1, ERROR, 61}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 11}, {0, SHIFT, 66}, },
			{{-1, ERROR, 63}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 41}, {0, SHIFT, 66}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {11, SHIFT, 96}, {15, SHIFT, 97}, {23, SHIFT, 46}, {24, SHIFT, 47}, {35, SHIFT, 50}, {42, SHIFT, 98}, },
			{{-1, ERROR, 65}, {42, SHIFT, 107}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 66}, },
			{{-1, ERROR, 69}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {38, SHIFT, 108}, {42, SHIFT, 51}, },
			{{-1, ERROR, 70}, {0, SHIFT, 28}, },
			{{-1, ERROR, 71}, {12, SHIFT, 111}, },
			{{-1, REDUCE, 25}, {39, SHIFT, 112}, },
			{{-1, ERROR, 73}, {12, SHIFT, 115}, {33, SHIFT, 17}, {41, SHIFT, 19}, },
			{{-1, REDUCE, 81}, {37, SHIFT, 69}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 78}, {36, SHIFT, 117}, },
			{{-1, ERROR, 79}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 80}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 82}, {37, SHIFT, 80}, },
			{{-1, ERROR, 83}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 84}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 85}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 86}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 87}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 88}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 89}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 90}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 91}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 92}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 93}, {42, SHIFT, 132}, },
			{{-1, REDUCE, 12}, {0, SHIFT, 66}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 66}, {6, SHIFT, 2}, },
			{{-1, ERROR, 96}, {7, SHIFT, 136}, },
			{{-1, ERROR, 97}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 74}, {35, SHIFT, 138}, {37, SHIFT, 80}, {41, SHIFT, 139}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 100}, {0, SHIFT, 28}, },
			{{-1, ERROR, 101}, {0, SHIFT, 28}, },
			{{-1, ERROR, 102}, {0, SHIFT, 28}, },
			{{-1, ERROR, 103}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 105}, {34, SHIFT, 145}, },
			{{-1, REDUCE, 42}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {11, SHIFT, 96}, {15, SHIFT, 97}, {23, SHIFT, 46}, {24, SHIFT, 47}, {35, SHIFT, 50}, {42, SHIFT, 98}, },
			{{-1, ERROR, 107}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 109}, {38, SHIFT, 148}, },
			{{-1, REDUCE, 14}, {0, SHIFT, 66}, {42, SHIFT, 149}, },
			{{-1, ERROR, 111}, {0, SHIFT, 28}, },
			{{-1, ERROR, 112}, {42, SHIFT, 152}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 26}, {39, SHIFT, 112}, },
			{{-1, ERROR, 115}, {0, SHIFT, 28}, },
			{{-1, ERROR, 116}, {12, SHIFT, 155}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 118}, {36, SHIFT, 156}, },
			{{-1, REDUCE, 49}, {40, SHIFT, 157}, },
			{{-1, ERROR, 120}, {38, SHIFT, 160}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 53}, {20, SHIFT, 84}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 61}, {26, SHIFT, 89}, {27, SHIFT, 90}, },
			{{-1, REDUCE, 59}, {25, SHIFT, 85}, },
			{{-1, REDUCE, 58}, {25, SHIFT, 85}, },
			{{-1, REDUCE, 57}, {25, SHIFT, 85}, },
			{{-1, REDUCE, 63}, {28, SHIFT, 91}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 64}, {28, SHIFT, 91}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 132}, {35, SHIFT, 161}, },
			{{-1, REDUCE, 6}, {42, SHIFT, 7}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 1}, {6, SHIFT, 2}, },
			{{-1, ERROR, 136}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 137}, {2, SHIFT, 165}, },
			{{-1, ERROR, 138}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 139}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 82}, {37, SHIFT, 80}, {41, SHIFT, 168}, },
			{{-1, REDUCE, 31}, {0, SHIFT, 66}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 66}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 66}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 66}, },
			{{-1, ERROR, 145}, {42, SHIFT, 169}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 66}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 149}, {33, SHIFT, 17}, {41, SHIFT, 19}, },
			{{-1, REDUCE, 18}, {42, SHIFT, 149}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 66}, {42, SHIFT, 149}, },
			{{-1, ERROR, 152}, {33, SHIFT, 17}, {41, SHIFT, 19}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 66}, {42, SHIFT, 149}, },
			{{-1, ERROR, 155}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 157}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 50}, {40, SHIFT, 157}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 161}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 162}, {17, SHIFT, 177}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 164}, {0, SHIFT, 28}, },
			{{-1, ERROR, 165}, {0, SHIFT, 28}, },
			{{-1, ERROR, 166}, {36, SHIFT, 180}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 168}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, ERROR, 169}, {35, SHIFT, 182}, },
			{{-1, REDUCE, 20}, {42, SHIFT, 149}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 19}, {42, SHIFT, 149}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 66}, {42, SHIFT, 149}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 176}, {36, SHIFT, 184}, },
			{{-1, ERROR, 177}, {42, SHIFT, 185}, },
			{{-1, REDUCE, 41}, {0, SHIFT, 66}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {11, SHIFT, 96}, {15, SHIFT, 97}, {23, SHIFT, 46}, {24, SHIFT, 47}, {35, SHIFT, 50}, {42, SHIFT, 98}, },
			{{-1, REDUCE, 41}, {0, SHIFT, 66}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {11, SHIFT, 96}, {15, SHIFT, 97}, {23, SHIFT, 46}, {24, SHIFT, 47}, {35, SHIFT, 50}, {42, SHIFT, 98}, },
			{{-1, REDUCE, 32}, {34, REDUCE, 83}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 182}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {24, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 49}, {35, SHIFT, 50}, {42, SHIFT, 51}, },
			{{-1, REDUCE, 21}, {42, SHIFT, 149}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 185}, {0, SHIFT, 28}, },
			{{-1, ERROR, 186}, {17, SHIFT, 190}, },
			{{-1, ERROR, 187}, {16, SHIFT, 191}, {17, SHIFT, 192}, },
			{{-1, ERROR, 188}, {36, SHIFT, 194}, },
			{{-1, ERROR, 189}, {0, SHIFT, 195}, },
			{{-1, ERROR, 190}, {11, SHIFT, 196}, },
			{{-1, ERROR, 191}, {0, SHIFT, 28}, },
			{{-1, ERROR, 192}, {15, SHIFT, 198}, },
			{{-1, ERROR, 193}, {17, SHIFT, 199}, },
			{{-1, REDUCE, 33}, {34, REDUCE, 84}, },
			{{-1, REDUCE, 10}, {0, REDUCE, 88}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 41}, {0, SHIFT, 66}, {3, SHIFT, 40}, {4, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {11, SHIFT, 96}, {15, SHIFT, 97}, {23, SHIFT, 46}, {24, SHIFT, 47}, {35, SHIFT, 50}, {42, SHIFT, 98}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 199}, {15, SHIFT, 201}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, {1, 5}, },
			{{-1, 4}, {95, 133}, {135, 133}, },
			{{-1, 16}, },
			{{-1, 8}, {133, 162}, },
			{{-1, 134}, {135, 163}, },
			{{-1, 9}, {12, 24}, {150, 24}, {170, 24}, {172, 24}, {183, 24}, },
			{{-1, 10}, {13, 27}, {25, 27}, },
			{{-1, 11}, },
			{{-1, 23}, },
			{{-1, 20}, {20, 61}, {37, 71}, {38, 72}, {73, 116}, {152, 171}, },
			{{-1, 39}, },
			{{-1, 113}, {114, 153}, },
			{{-1, 99}, {106, 146}, },
			{{-1, 100}, },
			{{-1, 101}, },
			{{-1, 102}, },
			{{-1, 193}, },
			{{-1, 103}, },
			{{-1, 81}, {82, 121}, {140, 121}, },
			{{-1, 104}, {178, 186}, {179, 187}, {197, 200}, },
			{{-1, 36}, {43, 74}, },
			{{-1, 118}, {138, 166}, {161, 176}, {182, 188}, },
			{{-1, 158}, {159, 175}, },
			{{-1, 119}, {19, 52}, {50, 78}, {69, 109}, {80, 120}, {97, 137}, {136, 164}, {139, 167}, {157, 174}, {168, 181}, },
			{{-1, 53}, },
			{{-1, 54}, {83, 122}, },
			{{-1, 55}, {84, 123}, },
			{{-1, 56}, {86, 125}, {87, 126}, {88, 127}, },
			{{-1, 57}, {85, 124}, },
			{{-1, 58}, {89, 128}, {90, 129}, },
			{{-1, 59}, {45, 75}, {48, 76}, {49, 77}, {91, 130}, {92, 131}, },
			{{-1, 60}, {64, 105}, {106, 105}, {178, 105}, {179, 105}, {197, 105}, },
			{{-1, 135}, },
			{{-1, 29}, {20, 62}, {22, 64}, {31, 68}, {61, 94}, {63, 95}, {70, 110}, {100, 141}, {101, 142}, {102, 143}, {103, 144}, {107, 147}, {111, 151}, {115, 154}, {155, 173}, {164, 178}, {165, 179}, {185, 189}, {191, 197}, },
			{{-1, 12}, {110, 150}, {151, 170}, {154, 172}, {173, 183}, },
			{{-1, 13}, {12, 25}, },
			{{-1, 114}, },
			{{-1, 82}, {98, 140}, },
			{{-1, 106}, },
			{{-1, 159}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: new line, 'class'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'end', identifier",
			"expecting: 'is', 'inherits'",
			"expecting: ':', '(', ':='",
			"expecting: 'end'",
			"expecting: 'end', 'begin', identifier",
			"expecting: 'begin'",
			"expecting: new line",
			"expecting: 'from'",
			"expecting: 'is'",
			"expecting: 'string', 'int', 'boolean', identifier",
			"expecting: ')', identifier",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'not', string lit, integer, '+', '-', '(', identifier",
			"expecting: new line, ':', ':='",
			"expecting: '('",
			"expecting: new line, 'true', 'false', 'class', 'null', 'new', 'me', 'loop', 'if', 'else', 'end', 'begin', string lit, integer, '(', identifier, EOF",
			"expecting: new line, 'end', identifier",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', ':', '.', ')', '[', ']', ';', ',', ':='",
			"expecting: new line, 'is', ':', ')', '[', ';', ':='",
			"expecting: 'is', ':', ':='",
			"expecting: ':', ':='",
			"expecting: ')'",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', ':', '.', ')', ']', ';', ',', ':='",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', ':', '.', '(', ')', '[', ']', ';', ',', ':='",
			"expecting: new line, 'is', ':', ')', ';', ':='",
			"expecting: new line, 'then', 'is', 'or', ':', ')', ']', ';', ',', ':='",
			"expecting: new line, 'then', 'is', 'and', 'or', ':', ')', ']', ';', ',', ':='",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '>', '>=', '=', ':', ')', ']', ';', ',', ':='",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '+', '-', '>', '>=', '=', ':', ')', ']', ';', ',', ':='",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', ':', ')', ']', ';', ',', ':='",
			"expecting: new line, 'end', 'begin', identifier",
			"expecting: new line, 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'end', string lit, integer, '(', identifier",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'not', string lit, integer, '+', '-', '(', ']', identifier",
			"expecting: ')', ';'",
			"expecting: new line, 'class', EOF",
			"expecting: 'while'",
			"expecting: '.', '(', '[', ':='",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'else', 'end', string lit, integer, '(', identifier",
			"expecting: '.'",
			"expecting: ']'",
			"expecting: new line, 'begin', identifier",
			"expecting: ')', ','",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', ':', ')', ']', ';', ',', ':='",
			"expecting: 'class', EOF",
			"expecting: 'then'",
			"expecting: '.', '[', ':='",
			"expecting: new line, 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'else', 'end', string lit, integer, '(', identifier",
			"expecting: 'begin', identifier",
			"expecting: new line, '.'",
			"expecting: 'else', 'end'",
			"expecting: 'loop'",
			"expecting: 'if'",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 2, 3, 2, 4, 5, 6, 7, 3, 8, 3, 3, 9, 10, 11, 12, 13, 14, 15, 1, 9, 6, 7, 3, 16, 3, 17, 18, 1, 9, 19, 19, 19, 19, 20, 21, 22, 23, 24, 24, 24, 12, 24, 14, 24, 24, 14, 14, 14, 25, 26, 27, 28, 28, 29, 30, 31, 31, 24, 9, 32, 9, 33, 1, 17, 11, 18, 34, 9, 11, 35, 21, 19, 31, 31, 31, 23, 14, 14, 19, 19, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1, 32, 36, 37, 14, 38, 39, 9, 9, 9, 9, 6, 40, 39, 9, 19, 41, 42, 9, 1, 35, 35, 9, 11, 24, 23, 43, 41, 19, 28, 28, 30, 44, 44, 44, 31, 31, 31, 31, 16, 3, 45, 45, 14, 46, 14, 14, 47, 48, 48, 48, 48, 1, 39, 18, 19, 22, 49, 42, 22, 35, 42, 9, 24, 14, 43, 43, 19, 14, 6, 45, 9, 9, 23, 9, 14, 16, 49, 35, 49, 42, 43, 43, 23, 1, 33, 48, 50, 9, 14, 49, 24, 9, 6, 51, 23, 9, 52, 9, 53, 6, 50, 36, 9, 33, 9, 53, 6, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
