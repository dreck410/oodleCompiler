/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.parser;

import com.bju.cps450.lexer.*;
import com.bju.cps450.node.*;
import com.bju.cps450.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAclassystart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAclassystart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ALinesStart */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAclassdecl1ClassDecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAclassdecl2ClassDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAclassdecl3ClassDecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AAclassdecl4ClassDecl */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce AAclassdecl5ClassDecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list);
            }
            break;
            case 8: /* reduce AAclassdecl6ClassDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AAclassdecl7ClassDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list);
            }
            break;
            case 10: /* reduce AAclassdecl8ClassDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list);
            }
            break;
            case 11: /* reduce AClassInherits */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list);
            }
            break;
            case 12: /* reduce AAvardecl1VarDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce AAvardecl2VarDecl */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list);
            }
            break;
            case 14: /* reduce AAvardecl3VarDecl */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list);
            }
            break;
            case 15: /* reduce AAvardecl4VarDecl */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list);
            }
            break;
            case 16: /* reduce AAmethoddecl1MethodDecl */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list);
            }
            break;
            case 17: /* reduce AAmethoddecl2MethodDecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list);
            }
            break;
            case 18: /* reduce AAmethoddecl3MethodDecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list);
            }
            break;
            case 19: /* reduce AAmethoddecl4MethodDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list);
            }
            break;
            case 20: /* reduce AAmethoddecl5MethodDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list);
            }
            break;
            case 21: /* reduce AAmethoddecl6MethodDecl */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list);
            }
            break;
            case 22: /* reduce AAmethoddecl7MethodDecl */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list);
            }
            break;
            case 23: /* reduce AAmethoddecl8MethodDecl */
            {
                ArrayList<Object> list = new23();
                push(goTo(4), list);
            }
            break;
            case 24: /* reduce AAmethoddecl9MethodDecl */
            {
                ArrayList<Object> list = new24();
                push(goTo(4), list);
            }
            break;
            case 25: /* reduce AAmethoddecl10MethodDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(4), list);
            }
            break;
            case 26: /* reduce AAmethoddecl11MethodDecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(4), list);
            }
            break;
            case 27: /* reduce AAmethoddecl12MethodDecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(4), list);
            }
            break;
            case 28: /* reduce AAmethoddecl13MethodDecl */
            {
                ArrayList<Object> list = new28();
                push(goTo(4), list);
            }
            break;
            case 29: /* reduce AAmethoddecl14MethodDecl */
            {
                ArrayList<Object> list = new29();
                push(goTo(4), list);
            }
            break;
            case 30: /* reduce AAmethoddecl15MethodDecl */
            {
                ArrayList<Object> list = new30();
                push(goTo(4), list);
            }
            break;
            case 31: /* reduce AAmethoddecl16MethodDecl */
            {
                ArrayList<Object> list = new31();
                push(goTo(4), list);
            }
            break;
            case 32: /* reduce ATypeTypeDecl */
            {
                ArrayList<Object> list = new32();
                push(goTo(5), list);
            }
            break;
            case 33: /* reduce AExprExprAssignment */
            {
                ArrayList<Object> list = new33();
                push(goTo(6), list);
            }
            break;
            case 34: /* reduce AAargdecllist1ArgDeclList */
            {
                ArrayList<Object> list = new34();
                push(goTo(7), list);
            }
            break;
            case 35: /* reduce AAargdecllist2ArgDeclList */
            {
                ArrayList<Object> list = new35();
                push(goTo(7), list);
            }
            break;
            case 36: /* reduce AArgList */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list);
            }
            break;
            case 37: /* reduce AIfStmtStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list);
            }
            break;
            case 38: /* reduce AAssignStmtStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(9), list);
            }
            break;
            case 39: /* reduce ALoopStmtStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(9), list);
            }
            break;
            case 40: /* reduce ACallStmtStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(9), list);
            }
            break;
            case 41: /* reduce AAcallstmt1CallStmt */
            {
                ArrayList<Object> list = new41();
                push(goTo(10), list);
            }
            break;
            case 42: /* reduce AAcallstmt2$1CallStmt */
            {
                ArrayList<Object> list = new42();
                push(goTo(10), list);
            }
            break;
            case 43: /* reduce AAloopstmt1LoopStmt */
            {
                ArrayList<Object> list = new43();
                push(goTo(11), list);
            }
            break;
            case 44: /* reduce AAloopstmt2LoopStmt */
            {
                ArrayList<Object> list = new44();
                push(goTo(11), list);
            }
            break;
            case 45: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(12), list);
            }
            break;
            case 46: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new46();
                push(goTo(12), list);
            }
            break;
            case 47: /* reduce AAifstmt3IfStmt */
            {
                ArrayList<Object> list = new47();
                push(goTo(12), list);
            }
            break;
            case 48: /* reduce AAifstmt4IfStmt */
            {
                ArrayList<Object> list = new48();
                push(goTo(12), list);
            }
            break;
            case 49: /* reduce AAelsestmt1ElseStmt */
            {
                ArrayList<Object> list = new49();
                push(goTo(13), list);
            }
            break;
            case 50: /* reduce AAelsestmt2ElseStmt */
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list);
            }
            break;
            case 51: /* reduce AAassignstmt1AssignStmt */
            {
                ArrayList<Object> list = new51();
                push(goTo(14), list);
            }
            break;
            case 52: /* reduce AAassignstmt2AssignStmt */
            {
                ArrayList<Object> list = new52();
                push(goTo(14), list);
            }
            break;
            case 53: /* reduce ABraceExpr */
            {
                ArrayList<Object> list = new53();
                push(goTo(15), list);
            }
            break;
            case 54: /* reduce AAinttype1Type */
            {
                ArrayList<Object> list = new54();
                push(goTo(16), list);
            }
            break;
            case 55: /* reduce AAinttype2Type */
            {
                ArrayList<Object> list = new55();
                push(goTo(16), list);
            }
            break;
            case 56: /* reduce AAbooltype1Type */
            {
                ArrayList<Object> list = new56();
                push(goTo(16), list);
            }
            break;
            case 57: /* reduce AAbooltype2Type */
            {
                ArrayList<Object> list = new57();
                push(goTo(16), list);
            }
            break;
            case 58: /* reduce AAstringtype1Type */
            {
                ArrayList<Object> list = new58();
                push(goTo(16), list);
            }
            break;
            case 59: /* reduce AAstringtype2Type */
            {
                ArrayList<Object> list = new59();
                push(goTo(16), list);
            }
            break;
            case 60: /* reduce AAidtype1Type */
            {
                ArrayList<Object> list = new60();
                push(goTo(16), list);
            }
            break;
            case 61: /* reduce AAidtype2Type */
            {
                ArrayList<Object> list = new61();
                push(goTo(16), list);
            }
            break;
            case 62: /* reduce AAexprlist1ExprList */
            {
                ArrayList<Object> list = new62();
                push(goTo(17), list);
            }
            break;
            case 63: /* reduce AAexprlist2ExprList */
            {
                ArrayList<Object> list = new63();
                push(goTo(17), list);
            }
            break;
            case 64: /* reduce ACommaExpr */
            {
                ArrayList<Object> list = new64();
                push(goTo(18), list);
            }
            break;
            case 65: /* reduce ALvl6Expression */
            {
                ArrayList<Object> list = new65();
                push(goTo(19), list);
            }
            break;
            case 66: /* reduce AOrExpressionLvl6 */
            {
                ArrayList<Object> list = new66();
                push(goTo(20), list);
            }
            break;
            case 67: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new67();
                push(goTo(20), list);
            }
            break;
            case 68: /* reduce AAndExpressionLvl5 */
            {
                ArrayList<Object> list = new68();
                push(goTo(21), list);
            }
            break;
            case 69: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new69();
                push(goTo(21), list);
            }
            break;
            case 70: /* reduce AEqExpressionLvl4 */
            {
                ArrayList<Object> list = new70();
                push(goTo(22), list);
            }
            break;
            case 71: /* reduce AGteqExpressionLvl4 */
            {
                ArrayList<Object> list = new71();
                push(goTo(22), list);
            }
            break;
            case 72: /* reduce AGtExpressionLvl4 */
            {
                ArrayList<Object> list = new72();
                push(goTo(22), list);
            }
            break;
            case 73: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new73();
                push(goTo(22), list);
            }
            break;
            case 74: /* reduce AConcatExpressionLvl3 */
            {
                ArrayList<Object> list = new74();
                push(goTo(23), list);
            }
            break;
            case 75: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new75();
                push(goTo(23), list);
            }
            break;
            case 76: /* reduce APlusExpressionLvl2 */
            {
                ArrayList<Object> list = new76();
                push(goTo(24), list);
            }
            break;
            case 77: /* reduce AMinusExpressionLvl2 */
            {
                ArrayList<Object> list = new77();
                push(goTo(24), list);
            }
            break;
            case 78: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new78();
                push(goTo(24), list);
            }
            break;
            case 79: /* reduce AMultiplyExpressionLvl1 */
            {
                ArrayList<Object> list = new79();
                push(goTo(25), list);
            }
            break;
            case 80: /* reduce ADivideExpressionLvl1 */
            {
                ArrayList<Object> list = new80();
                push(goTo(25), list);
            }
            break;
            case 81: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new81();
                push(goTo(25), list);
            }
            break;
            case 82: /* reduce ANotExpressionLvl0 */
            {
                ArrayList<Object> list = new82();
                push(goTo(26), list);
            }
            break;
            case 83: /* reduce APosExpressionLvl0 */
            {
                ArrayList<Object> list = new83();
                push(goTo(26), list);
            }
            break;
            case 84: /* reduce ANegExpressionLvl0 */
            {
                ArrayList<Object> list = new84();
                push(goTo(26), list);
            }
            break;
            case 85: /* reduce APassExpressionLvl0 */
            {
                ArrayList<Object> list = new85();
                push(goTo(26), list);
            }
            break;
            case 86: /* reduce AIntExpressionLast */
            {
                ArrayList<Object> list = new86();
                push(goTo(27), list);
            }
            break;
            case 87: /* reduce AIdExpressionLast */
            {
                ArrayList<Object> list = new87();
                push(goTo(27), list);
            }
            break;
            case 88: /* reduce AStringLitExpressionLast */
            {
                ArrayList<Object> list = new88();
                push(goTo(27), list);
            }
            break;
            case 89: /* reduce ATrueExpressionLast */
            {
                ArrayList<Object> list = new89();
                push(goTo(27), list);
            }
            break;
            case 90: /* reduce AFalseExpressionLast */
            {
                ArrayList<Object> list = new90();
                push(goTo(27), list);
            }
            break;
            case 91: /* reduce ANullExpressionLast */
            {
                ArrayList<Object> list = new91();
                push(goTo(27), list);
            }
            break;
            case 92: /* reduce AMeExpressionLast */
            {
                ArrayList<Object> list = new92();
                push(goTo(27), list);
            }
            break;
            case 93: /* reduce ANewExpressionLast */
            {
                ArrayList<Object> list = new93();
                push(goTo(27), list);
            }
            break;
            case 94: /* reduce AAmethodcallexpressionlast1ExpressionLast */
            {
                ArrayList<Object> list = new94();
                push(goTo(27), list);
            }
            break;
            case 95: /* reduce AAmethodcallexpressionlast2$1ExpressionLast */
            {
                ArrayList<Object> list = new95();
                push(goTo(27), list);
            }
            break;
            case 96: /* reduce AAmethodcallexpressionlast3ExpressionLast */
            {
                ArrayList<Object> list = new96();
                push(goTo(27), list);
            }
            break;
            case 97: /* reduce AAmethodcallexpressionlast4$1ExpressionLast */
            {
                ArrayList<Object> list = new97();
                push(goTo(27), list);
            }
            break;
            case 98: /* reduce AParenthExpressionLast */
            {
                ArrayList<Object> list = new98();
                push(goTo(27), list);
            }
            break;
            case 99: /* reduce ATerminal$ClassDecl */
            {
                ArrayList<Object> list = new99();
                push(goTo(28), list);
            }
            break;
            case 100: /* reduce ANonTerminal$ClassDecl */
            {
                ArrayList<Object> list = new100();
                push(goTo(28), list);
            }
            break;
            case 101: /* reduce ATerminal$NewLine */
            {
                ArrayList<Object> list = new101();
                push(goTo(29), list);
            }
            break;
            case 102: /* reduce ANonTerminal$NewLine */
            {
                ArrayList<Object> list = new102();
                push(goTo(29), list);
            }
            break;
            case 103: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new103();
                push(goTo(30), list);
            }
            break;
            case 104: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new104();
                push(goTo(30), list);
            }
            break;
            case 105: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new105();
                push(goTo(31), list);
            }
            break;
            case 106: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new106();
                push(goTo(31), list);
            }
            break;
            case 107: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new107();
                push(goTo(32), list);
            }
            break;
            case 108: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new108();
                push(goTo(32), list);
            }
            break;
            case 109: /* reduce ATerminal$ArgList */
            {
                ArrayList<Object> list = new109();
                push(goTo(33), list);
            }
            break;
            case 110: /* reduce ANonTerminal$ArgList */
            {
                ArrayList<Object> list = new110();
                push(goTo(33), list);
            }
            break;
            case 111: /* reduce ATerminal$BraceExpr */
            {
                ArrayList<Object> list = new111();
                push(goTo(34), list);
            }
            break;
            case 112: /* reduce ANonTerminal$BraceExpr */
            {
                ArrayList<Object> list = new112();
                push(goTo(34), list);
            }
            break;
            case 113: /* reduce ATerminal$CommaExpr */
            {
                ArrayList<Object> list = new113();
                push(goTo(35), list);
            }
            break;
            case 114: /* reduce ANonTerminal$CommaExpr */
            {
                ArrayList<Object> list = new114();
                push(goTo(35), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAclassystart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAclassystart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode4.add(pclassdeclNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ALinesStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        pstartNode1 = (PStart)nodeArrayList2.get(0);
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAclassdecl1ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentifier tidentifierNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode6 = (TIdentifier)nodeArrayList6.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode4, listNode5, tidentifierNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAclassdecl2ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PClassInherits pclassinheritsNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentifier tidentifierNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pclassinheritsNode3 = (PClassInherits)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode6 = (TIdentifier)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pclassinheritsNode3, listNode4, listNode5, tidentifierNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAclassdecl3ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAclassdecl4ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PClassInherits pclassinheritsNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pclassinheritsNode3 = (PClassInherits)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pclassinheritsNode3, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAclassdecl5ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode4, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclassdecl6ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PClassInherits pclassinheritsNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pclassinheritsNode3 = (PClassInherits)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pclassinheritsNode3, listNode4, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassdecl7ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassdecl8ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PClassInherits pclassinheritsNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pclassinheritsNode3 = (PClassInherits)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList9.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pclassinheritsNode3, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AClassInherits */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassInherits pclassinheritsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        pclassinheritsNode1 = new AClassInherits(tidentifierNode2);
        }
	nodeList.add(pclassinheritsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, null);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypeNode3, null);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAvardecl3VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, pexpressionNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAvardecl4VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypeNode3, pexpressionNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAmethoddecl1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList9.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAmethoddecl2MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode6, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAmethoddecl3MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethoddecl4MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode6, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddecl5MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode6, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddecl6MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode7, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAmethoddecl7MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode6, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethoddecl8MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode7, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddecl9MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethoddecl10MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethoddecl11MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethoddecl12MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAmethoddecl13MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAmethoddecl14MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TIdentifier tidentifierNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidentifierNode10 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode7, listNode9, tidentifierNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAmethoddecl15MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAmethoddecl16MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TIdentifier tidentifierNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidentifierNode10 = (TIdentifier)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode7, listNode9, tidentifierNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATypeTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList2.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExprExprAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAargdecllist1ArgDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PArg pargNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pargNode1 = new AArg(tidentifierNode2, ptypeNode3);
        }
	if(pargNode1 != null)
	{
	  listNode4.add(pargNode1);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAargdecllist2ArgDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PArg pargNode1;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pargNode1 = new AArg(tidentifierNode2, ptypeNode3);
        }
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(pargNode1 != null)
	{
	  listNode5.add(pargNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);

        pargNode1 = new AArg(tidentifierNode2, ptypeNode3);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIfStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAssignStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALoopStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ACallStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAcallstmt1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ACallStatement(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAcallstmt2$1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ACallStatement(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAloopstmt1LoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        }

        pstatementNode1 = new ALoopStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAloopstmt2LoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ALoopStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAifstmt3IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAifstmt4IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAelsestmt1ElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAelsestmt2ElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAassignstmt1AssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(tidentifierNode2, listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAassignstmt2AssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpression pexpressionNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignmentStatement(tidentifierNode2, listNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ABraceExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAinttype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tintNode2 = (TInt)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AIntType(tintNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAinttype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tintNode2 = (TInt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AIntType(tintNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAbooltype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new ABooleanType(tbooleanNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAbooltype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new ABooleanType(tbooleanNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAstringtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tstringNode2 = (TString)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AStringType(tstringNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAstringtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tstringNode2 = (TString)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AStringType(tstringNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAidtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new ACustomType(tidentifierNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAidtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new ACustomType(tidentifierNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ACommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ALvl6Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AOrExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAndExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AEqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AGteqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGteqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AGtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGtExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AConcatExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AConcatExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce APlusExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AMinusExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AMultiplyExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplyExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ADivideExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivideExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANotExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce APosExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APosExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANegExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce APassExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AIntExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntExpression(tintegerNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AIdExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AStringLitExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStringLit tstringlitNode2;
        tstringlitNode2 = (TStringLit)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringLitExpression(tstringlitNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATrueExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionNode1 = new ATrueExpression(ttrueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AFalseExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionNode1 = new AFalseExpression(tfalseNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANullExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pexpressionNode1 = new ANullExpression(tnullNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AMeExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpressionNode1 = new AMeExpression(tmeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANewExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList2.get(0);

        pexpressionNode1 = new ANewExpression(ptypeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAmethodcallexpressionlast1ExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMethodCallExpression(null, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AAmethodcallexpressionlast2$1ExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMethodCallExpression(pexpressionNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AAmethodcallexpressionlast3ExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMethodCallExpression(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AAmethodcallexpressionlast4$1ExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMethodCallExpression(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AParenthExpressionLast */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ATerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ANonTerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATerminal$NewLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNewLine tnewlineNode1;
        tnewlineNode1 = (TNewLine)nodeArrayList1.get(0);
	if(tnewlineNode1 != null)
	{
	  listNode2.add(tnewlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANonTerminal$NewLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNewLine tnewlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnewlineNode2 = (TNewLine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnewlineNode2 != null)
	{
	  listNode3.add(tnewlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArg pargNode1;
        pargNode1 = (PArg)nodeArrayList1.get(0);
	if(pargNode1 != null)
	{
	  listNode2.add(pargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArg pargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargNode2 = (PArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargNode2 != null)
	{
	  listNode3.add(pargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$BraceExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$BraceExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {6, SHIFT, 2}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {6, SHIFT, 2}, },
			{{-1, ERROR, 2}, {42, SHIFT, 6}, },
			{{-1, ERROR, 3}, {46, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {6, SHIFT, 2}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 6}, {12, SHIFT, 9}, {14, SHIFT, 10}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 1}, {6, SHIFT, 2}, },
			{{-1, ERROR, 9}, {0, SHIFT, 13}, },
			{{-1, ERROR, 10}, {5, SHIFT, 15}, },
			{{-1, ERROR, 11}, {12, SHIFT, 16}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 14}, {0, SHIFT, 17}, {17, SHIFT, 18}, {42, SHIFT, 19}, },
			{{-1, ERROR, 15}, {42, SHIFT, 24}, },
			{{-1, ERROR, 16}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 18}, {42, SHIFT, 26}, },
			{{-1, ERROR, 19}, {0, SHIFT, 13}, {33, SHIFT, 27}, {35, SHIFT, 28}, {41, SHIFT, 29}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 22}, {17, SHIFT, 33}, {42, SHIFT, 19}, },
			{{-1, ERROR, 23}, {17, SHIFT, 36}, {42, SHIFT, 37}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 25}, {0, SHIFT, 17}, {17, SHIFT, 39}, {42, SHIFT, 19}, },
			{{-1, ERROR, 26}, {0, SHIFT, 13}, },
			{{-1, ERROR, 27}, {1, SHIFT, 43}, {13, SHIFT, 44}, {18, SHIFT, 45}, {42, SHIFT, 46}, },
			{{-1, ERROR, 28}, {36, SHIFT, 48}, {42, SHIFT, 49}, },
			{{-1, ERROR, 29}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 30}, {0, SHIFT, 13}, {41, SHIFT, 29}, },
			{{-1, ERROR, 31}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 12}, {0, SHIFT, 17}, },
			{{-1, ERROR, 33}, {42, SHIFT, 75}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 35}, {17, SHIFT, 76}, {42, SHIFT, 37}, },
			{{-1, ERROR, 36}, {42, SHIFT, 77}, },
			{{-1, ERROR, 37}, {35, SHIFT, 28}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 39}, {42, SHIFT, 78}, },
			{{-1, ERROR, 40}, {17, SHIFT, 79}, {42, SHIFT, 19}, },
			{{-1, ERROR, 41}, {17, SHIFT, 81}, {42, SHIFT, 37}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 58}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 54}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 56}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 60}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 48}, {12, SHIFT, 88}, {33, SHIFT, 27}, },
			{{-1, ERROR, 49}, {33, SHIFT, 27}, },
			{{-1, ERROR, 50}, {36, SHIFT, 91}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 54}, {1, SHIFT, 43}, {13, SHIFT, 44}, {18, SHIFT, 45}, {42, SHIFT, 46}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 56}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 59}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 60}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 61}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, REDUCE, 87}, {35, SHIFT, 97}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 65}, {21, SHIFT, 98}, },
			{{-1, REDUCE, 67}, {20, SHIFT, 99}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 73}, {25, SHIFT, 100}, {30, SHIFT, 101}, {31, SHIFT, 102}, {32, SHIFT, 103}, },
			{{-1, REDUCE, 75}, {26, SHIFT, 104}, {27, SHIFT, 105}, },
			{{-1, REDUCE, 78}, {28, SHIFT, 106}, {29, SHIFT, 107}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 85}, {34, SHIFT, 108}, },
			{{-1, ERROR, 72}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 14}, {0, SHIFT, 17}, },
			{{-1, ERROR, 75}, {0, SHIFT, 13}, },
			{{-1, ERROR, 76}, {42, SHIFT, 111}, },
			{{-1, ERROR, 77}, {0, SHIFT, 13}, },
			{{-1, ERROR, 78}, {0, SHIFT, 13}, },
			{{-1, ERROR, 79}, {42, SHIFT, 114}, },
			{{-1, ERROR, 80}, {17, SHIFT, 115}, {42, SHIFT, 37}, },
			{{-1, ERROR, 81}, {42, SHIFT, 116}, },
			{{-1, ERROR, 82}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 59}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 55}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 57}, {37, SHIFT, 82}, },
			{{-1, REDUCE, 61}, {37, SHIFT, 82}, },
			{{-1, ERROR, 88}, {0, SHIFT, 13}, },
			{{-1, ERROR, 89}, {12, SHIFT, 120}, },
			{{-1, REDUCE, 34}, {39, SHIFT, 121}, },
			{{-1, ERROR, 91}, {12, SHIFT, 124}, {33, SHIFT, 27}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 96}, {36, SHIFT, 126}, },
			{{-1, ERROR, 97}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {36, SHIFT, 127}, {42, SHIFT, 62}, },
			{{-1, ERROR, 98}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 99}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 100}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 101}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 102}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 103}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 104}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 105}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 106}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 107}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 108}, {42, SHIFT, 140}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 17}, },
			{{-1, ERROR, 111}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 17}, },
			{{-1, ERROR, 114}, {0, SHIFT, 13}, },
			{{-1, ERROR, 115}, {42, SHIFT, 143}, },
			{{-1, ERROR, 116}, {0, SHIFT, 13}, },
			{{-1, ERROR, 117}, {38, SHIFT, 145}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 119}, {0, SHIFT, 17}, {19, SHIFT, 146}, {42, SHIFT, 147}, },
			{{-1, ERROR, 120}, {0, SHIFT, 13}, },
			{{-1, ERROR, 121}, {42, SHIFT, 150}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 35}, {39, SHIFT, 121}, },
			{{-1, ERROR, 124}, {0, SHIFT, 13}, },
			{{-1, ERROR, 125}, {12, SHIFT, 153}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 128}, {36, SHIFT, 154}, },
			{{-1, REDUCE, 62}, {40, SHIFT, 155}, },
			{{-1, REDUCE, 66}, {20, SHIFT, 99}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 74}, {26, SHIFT, 104}, {27, SHIFT, 105}, },
			{{-1, REDUCE, 72}, {25, SHIFT, 100}, },
			{{-1, REDUCE, 71}, {25, SHIFT, 100}, },
			{{-1, REDUCE, 70}, {25, SHIFT, 100}, },
			{{-1, REDUCE, 76}, {28, SHIFT, 106}, {29, SHIFT, 107}, },
			{{-1, REDUCE, 77}, {28, SHIFT, 106}, {29, SHIFT, 107}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 140}, {35, SHIFT, 158}, },
			{{-1, REDUCE, 9}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 17}, },
			{{-1, ERROR, 143}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 8}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 146}, {0, SHIFT, 13}, },
			{{-1, ERROR, 147}, {0, SHIFT, 13}, {33, SHIFT, 27}, {41, SHIFT, 29}, },
			{{-1, ERROR, 148}, {19, SHIFT, 161}, {42, SHIFT, 147}, },
			{{-1, ERROR, 149}, {0, SHIFT, 17}, {19, SHIFT, 162}, {42, SHIFT, 147}, },
			{{-1, ERROR, 150}, {33, SHIFT, 27}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 152}, {0, SHIFT, 17}, {19, SHIFT, 165}, {42, SHIFT, 147}, },
			{{-1, ERROR, 153}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 155}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 63}, {40, SHIFT, 155}, },
			{{-1, ERROR, 158}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {36, SHIFT, 170}, {42, SHIFT, 62}, },
			{{-1, REDUCE, 10}, {0, SHIFT, 17}, },
			{{-1, ERROR, 160}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 174}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 161}, {0, SHIFT, 13}, },
			{{-1, ERROR, 162}, {0, SHIFT, 13}, },
			{{-1, ERROR, 163}, {19, SHIFT, 185}, {42, SHIFT, 147}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 165}, {0, SHIFT, 13}, },
			{{-1, ERROR, 166}, {19, SHIFT, 187}, {42, SHIFT, 147}, },
			{{-1, ERROR, 167}, {0, SHIFT, 17}, {19, SHIFT, 188}, {42, SHIFT, 147}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 171}, {36, SHIFT, 190}, },
			{{-1, ERROR, 172}, {7, SHIFT, 191}, },
			{{-1, ERROR, 173}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 174}, {42, SHIFT, 193}, },
			{{-1, REDUCE, 87}, {35, SHIFT, 194}, {37, SHIFT, 82}, {41, SHIFT, 195}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 177}, {0, SHIFT, 13}, },
			{{-1, ERROR, 178}, {0, SHIFT, 13}, },
			{{-1, ERROR, 179}, {0, SHIFT, 13}, },
			{{-1, ERROR, 180}, {0, SHIFT, 13}, },
			{{-1, ERROR, 181}, {34, SHIFT, 201}, },
			{{-1, ERROR, 182}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 202}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 183}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 204}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 184}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 206}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 185}, {0, SHIFT, 13}, },
			{{-1, ERROR, 186}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 209}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 187}, {0, SHIFT, 13}, },
			{{-1, ERROR, 188}, {0, SHIFT, 13}, },
			{{-1, ERROR, 189}, {19, SHIFT, 213}, {42, SHIFT, 147}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 191}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 192}, {2, SHIFT, 215}, },
			{{-1, ERROR, 193}, {0, SHIFT, 13}, },
			{{-1, ERROR, 194}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {36, SHIFT, 127}, {42, SHIFT, 62}, },
			{{-1, ERROR, 195}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 196}, {37, SHIFT, 82}, {41, SHIFT, 219}, },
			{{-1, REDUCE, 40}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 17}, },
			{{-1, ERROR, 201}, {42, SHIFT, 220}, },
			{{-1, ERROR, 202}, {42, SHIFT, 221}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 204}, {42, SHIFT, 222}, },
			{{-1, ERROR, 205}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 223}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 206}, {42, SHIFT, 224}, },
			{{-1, ERROR, 207}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 225}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 208}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 226}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 209}, {42, SHIFT, 228}, },
			{{-1, ERROR, 210}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 229}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 211}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 230}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 212}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 232}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 213}, {0, SHIFT, 13}, },
			{{-1, ERROR, 214}, {0, SHIFT, 13}, },
			{{-1, ERROR, 215}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 17}, },
			{{-1, ERROR, 217}, {36, SHIFT, 237}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 219}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {42, SHIFT, 62}, },
			{{-1, ERROR, 220}, {35, SHIFT, 239}, },
			{{-1, ERROR, 221}, {0, SHIFT, 13}, },
			{{-1, ERROR, 222}, {0, SHIFT, 13}, },
			{{-1, ERROR, 223}, {42, SHIFT, 242}, },
			{{-1, ERROR, 224}, {0, SHIFT, 13}, },
			{{-1, ERROR, 225}, {42, SHIFT, 244}, },
			{{-1, ERROR, 226}, {42, SHIFT, 245}, },
			{{-1, ERROR, 227}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 246}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 228}, {0, SHIFT, 13}, },
			{{-1, ERROR, 229}, {42, SHIFT, 248}, },
			{{-1, ERROR, 230}, {42, SHIFT, 249}, },
			{{-1, ERROR, 231}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 250}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 232}, {42, SHIFT, 251}, },
			{{-1, ERROR, 233}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 252}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 234}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 253}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 235}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 255}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 236}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {16, SHIFT, 257}, {17, SHIFT, 258}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, REDUCE, 41}, {34, REDUCE, 96}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 239}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {22, SHIFT, 56}, {23, SHIFT, 57}, {24, SHIFT, 58}, {26, SHIFT, 59}, {27, SHIFT, 60}, {35, SHIFT, 61}, {36, SHIFT, 170}, {42, SHIFT, 62}, },
			{{-1, REDUCE, 24}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 17}, },
			{{-1, ERROR, 242}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 18}, {0, SHIFT, 17}, },
			{{-1, ERROR, 244}, {0, SHIFT, 13}, },
			{{-1, ERROR, 245}, {0, SHIFT, 13}, },
			{{-1, ERROR, 246}, {42, SHIFT, 265}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 17}, },
			{{-1, ERROR, 248}, {0, SHIFT, 13}, },
			{{-1, ERROR, 249}, {0, SHIFT, 13}, },
			{{-1, ERROR, 250}, {42, SHIFT, 268}, },
			{{-1, ERROR, 251}, {0, SHIFT, 13}, },
			{{-1, ERROR, 252}, {42, SHIFT, 270}, },
			{{-1, ERROR, 253}, {42, SHIFT, 271}, },
			{{-1, ERROR, 254}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 272}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 255}, {11, SHIFT, 273}, },
			{{-1, ERROR, 256}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {17, SHIFT, 274}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 257}, {0, SHIFT, 13}, },
			{{-1, ERROR, 258}, {15, SHIFT, 276}, },
			{{-1, ERROR, 259}, {17, SHIFT, 277}, },
			{{-1, ERROR, 260}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {16, SHIFT, 257}, {17, SHIFT, 278}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, ERROR, 261}, {36, SHIFT, 280}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 26}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 22}, {0, SHIFT, 17}, },
			{{-1, ERROR, 265}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 25}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 21}, {0, SHIFT, 17}, },
			{{-1, ERROR, 268}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 17}, },
			{{-1, ERROR, 270}, {0, SHIFT, 13}, },
			{{-1, ERROR, 271}, {0, SHIFT, 13}, },
			{{-1, ERROR, 272}, {42, SHIFT, 285}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 274}, {11, SHIFT, 286}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 17}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 277}, {15, SHIFT, 288}, },
			{{-1, ERROR, 278}, {15, SHIFT, 289}, },
			{{-1, ERROR, 279}, {17, SHIFT, 290}, },
			{{-1, REDUCE, 42}, {34, REDUCE, 97}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 27}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 23}, {0, SHIFT, 17}, },
			{{-1, ERROR, 285}, {0, SHIFT, 13}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 50}, {3, SHIFT, 51}, {4, SHIFT, 52}, {8, SHIFT, 53}, {9, SHIFT, 54}, {10, SHIFT, 55}, {11, SHIFT, 172}, {15, SHIFT, 173}, {23, SHIFT, 57}, {24, SHIFT, 58}, {35, SHIFT, 61}, {42, SHIFT, 175}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 290}, {15, SHIFT, 292}, },
			{{-1, REDUCE, 31}, {0, SHIFT, 17}, },
			{{-1, REDUCE, 48}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, {1, 5}, },
			{{-1, 4}, {4, 7}, {8, 12}, },
			{{-1, 11}, },
			{{-1, 20}, {22, 34}, {40, 34}, {148, 34}, {163, 34}, {166, 34}, {189, 34}, },
			{{-1, 21}, {23, 38}, {35, 38}, {41, 38}, {80, 38}, },
			{{-1, 30}, {48, 89}, {49, 90}, {91, 125}, {150, 164}, },
			{{-1, 31}, {30, 72}, },
			{{-1, 50}, },
			{{-1, 122}, {123, 151}, },
			{{-1, 176}, {182, 203}, {205, 203}, {207, 203}, {210, 203}, {227, 203}, {231, 203}, {233, 203}, {254, 203}, {256, 203}, {260, 203}, {287, 203}, },
			{{-1, 177}, },
			{{-1, 178}, },
			{{-1, 179}, },
			{{-1, 259}, {260, 279}, },
			{{-1, 180}, },
			{{-1, 83}, {84, 118}, {85, 118}, {86, 118}, {87, 118}, {196, 118}, },
			{{-1, 47}, {54, 92}, },
			{{-1, 128}, {158, 171}, {194, 217}, {239, 261}, },
			{{-1, 156}, {157, 169}, },
			{{-1, 129}, {29, 63}, {61, 96}, {82, 117}, {155, 168}, {173, 192}, {191, 214}, {195, 218}, {219, 238}, },
			{{-1, 64}, },
			{{-1, 65}, {98, 130}, },
			{{-1, 66}, {99, 131}, },
			{{-1, 67}, {101, 133}, {102, 134}, {103, 135}, },
			{{-1, 68}, {100, 132}, },
			{{-1, 69}, {104, 136}, {105, 137}, },
			{{-1, 70}, {56, 93}, {59, 94}, {60, 95}, {106, 138}, {107, 139}, },
			{{-1, 71}, {160, 181}, {182, 181}, {183, 181}, {184, 181}, {186, 181}, {205, 181}, {207, 181}, {208, 181}, {210, 181}, {211, 181}, {212, 181}, {227, 181}, {231, 181}, {233, 181}, {234, 181}, {235, 181}, {236, 181}, {254, 181}, {256, 181}, {260, 181}, {275, 181}, {287, 181}, },
			{{-1, 8}, },
			{{-1, 32}, {9, 14}, {16, 25}, {26, 42}, {30, 73}, {31, 74}, {72, 109}, {75, 110}, {77, 112}, {78, 113}, {88, 119}, {111, 141}, {114, 142}, {116, 144}, {120, 149}, {124, 152}, {143, 159}, {146, 160}, {153, 167}, {161, 183}, {162, 184}, {165, 186}, {177, 197}, {178, 198}, {179, 199}, {180, 200}, {185, 208}, {187, 211}, {188, 212}, {193, 216}, {213, 234}, {214, 235}, {215, 236}, {221, 240}, {222, 241}, {224, 243}, {228, 247}, {242, 262}, {244, 263}, {245, 264}, {248, 266}, {249, 267}, {251, 269}, {257, 275}, {265, 281}, {268, 282}, {270, 283}, {271, 284}, {285, 291}, },
			{{-1, 22}, {25, 40}, {119, 148}, {149, 163}, {152, 166}, {167, 189}, },
			{{-1, 23}, {22, 35}, {25, 41}, {40, 80}, },
			{{-1, 182}, {183, 205}, {184, 207}, {186, 210}, {208, 227}, {211, 231}, {212, 233}, {234, 254}, {235, 256}, {236, 260}, {275, 287}, },
			{{-1, 123}, },
			{{-1, 84}, {44, 85}, {45, 86}, {46, 87}, {175, 196}, },
			{{-1, 157}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: new line, 'class'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: 'is', 'inherits'",
			"expecting: new line",
			"expecting: 'from'",
			"expecting: 'is'",
			"expecting: new line, 'true', 'false', 'class', 'null', 'new', 'me', 'loop', 'if', 'else', 'end', 'begin', string lit, integer, '(', identifier, EOF",
			"expecting: new line, 'end', identifier",
			"expecting: new line, ':', '(', ':='",
			"expecting: 'end', 'begin', identifier",
			"expecting: 'end', identifier",
			"expecting: 'string', 'int', 'boolean', identifier",
			"expecting: ')', identifier",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'not', string lit, integer, '+', '-', '(', identifier",
			"expecting: new line, ':='",
			"expecting: new line, 'end', 'begin', identifier",
			"expecting: '('",
			"expecting: new line, 'class', EOF",
			"expecting: new line, 'then', 'is', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', '.', ')', '[', ']', ';', ',', ':='",
			"expecting: new line, 'is', ')', ';', ':='",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: new line, 'then', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', '.', ')', ']', ','",
			"expecting: new line, 'then', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', '.', '(', ')', ']', ','",
			"expecting: new line, 'then', 'or', ')', ']', ','",
			"expecting: new line, 'then', 'and', 'or', ')', ']', ','",
			"expecting: new line, 'then', 'and', 'or', '&', '>', '>=', '=', ')', ']', ','",
			"expecting: new line, 'then', 'and', 'or', '&', '+', '-', '>', '>=', '=', ')', ']', ','",
			"expecting: new line, 'then', 'and', 'or', '&', '+', '-', '/', '*', '>', '>=', '=', ')', ']', ','",
			"expecting: ')', ';'",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'not', string lit, integer, '+', '-', '(', ')', identifier",
			"expecting: ']'",
			"expecting: new line, 'begin', identifier",
			"expecting: ')', ','",
			"expecting: new line, 'then', 'and', 'or', '&', ')', ']', ','",
			"expecting: new line, ':', ':='",
			"expecting: 'begin', identifier",
			"expecting: new line, 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'end', string lit, integer, '(', identifier",
			"expecting: 'while'",
			"expecting: '.', '(', '[', ':='",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'else', 'end', string lit, integer, '(', identifier",
			"expecting: '.'",
			"expecting: 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'end', string lit, integer, '(', identifier",
			"expecting: 'then'",
			"expecting: '[', ':='",
			"expecting: new line, 'true', 'false', 'null', 'new', 'me', 'loop', 'if', 'else', 'end', string lit, integer, '(', identifier",
			"expecting: new line, '.'",
			"expecting: 'loop'",
			"expecting: 'if'",
			"expecting: 'end'",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 2, 3, 2, 4, 3, 3, 5, 6, 7, 3, 8, 9, 1, 5, 8, 1, 10, 11, 12, 12, 12, 7, 9, 5, 13, 14, 15, 16, 5, 17, 1, 11, 12, 1, 18, 12, 1, 12, 12, 19, 20, 20, 20, 20, 21, 22, 23, 24, 25, 25, 25, 13, 25, 15, 25, 25, 15, 15, 15, 26, 5, 27, 28, 28, 29, 30, 31, 31, 25, 5, 17, 17, 5, 1, 5, 5, 1, 12, 1, 15, 20, 20, 20, 20, 20, 5, 7, 32, 22, 25, 31, 31, 31, 24, 33, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 17, 19, 5, 19, 19, 5, 1, 5, 34, 20, 35, 5, 1, 32, 32, 5, 7, 25, 25, 24, 36, 28, 28, 30, 37, 37, 37, 31, 31, 31, 31, 18, 19, 19, 5, 19, 20, 5, 38, 39, 35, 23, 32, 35, 5, 25, 15, 36, 36, 33, 19, 40, 5, 5, 39, 32, 5, 39, 35, 36, 36, 25, 24, 41, 15, 1, 42, 43, 5, 5, 5, 5, 44, 45, 40, 40, 5, 40, 5, 5, 39, 25, 15, 46, 5, 33, 15, 47, 48, 48, 48, 48, 1, 1, 43, 1, 45, 1, 45, 40, 1, 45, 40, 40, 5, 5, 5, 9, 24, 5, 15, 18, 5, 5, 1, 5, 1, 1, 45, 5, 1, 1, 45, 1, 45, 40, 40, 48, 49, 5, 33, 9, 9, 5, 9, 5, 5, 1, 9, 5, 5, 1, 5, 1, 1, 45, 50, 45, 5, 51, 52, 43, 24, 9, 9, 9, 5, 9, 9, 5, 9, 5, 5, 1, 5, 50, 40, 5, 51, 51, 52, 49, 9, 9, 9, 9, 5, 5, 45, 5, 5, 51, 9, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
