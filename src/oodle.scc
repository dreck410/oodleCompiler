Package com.bju.cps450;

Helpers

  line_feed           = 10;
  carriage_return     = 13;

  any_character       = [0 .. 128];
  letter              = [['a'..'z'] + ['A'..'Z']];
  octal               = ['0'..'7'];
  digit               = ['0'..'9'];
  tilde               = '~';
  underscore          = '_';
  escape              = '\';
  escaped_slash       = escape escape | escape'134';
  escaped_tab         = escape't' | escape'011';
  escaped_quote       = escape'"';
  escaped_newline     = escape'n' | escape'012';
  escaped_r           = escape'r' | escape'015';
  form_feed           = escape 'f' | escape'014';
  escaped_octal       = escape octal octal octal;


  quote               = '"';
  new_line            = line_feed | carriage_return;
  invalid_string_chars = [[[quote  + escape] + line_feed ]+ carriage_return];
  valid_string        = [ any_character - invalid_string_chars]
                                                 | escaped_tab
                                                 | escaped_newline
                                                 | escaped_r
                                                 | escaped_slash
                                                 | escaped_quote
                                                 | escaped_octal
                                                 | form_feed;

  invalid_string      = valid_string* escape valid_string* ;



Tokens


  new_line             = line_feed | carriage_return line_feed;

  line_continue        = underscore new_line;
  space                = ' ';
  comment              = tilde([any_character - [line_feed + carriage_return]] )*;
  tab                  = 9;

  string               = 'string'; 
  then                 = 'then'; 
  true                 = 'true';
  false                = 'false';
  from                 = 'from';
  class                = 'class';
  while                = 'while';
  null                 = 'null';
  new                  = 'new';
  me                   = 'me';
  loop                 = 'loop';
  is                   = 'is';
  int                  = 'int';
  inherits             = 'inherits';
  if                   = 'if';
  else                 = 'else';
  end                  = 'end';
  boolean              = 'boolean';
  begin                = 'begin';
  logical_and          = 'and';
  logical_or           = 'or';
  logical_not          = 'not';

  string_lit           = quote valid_string* quote;
  integer              = '-'*digit digit*;

  string_concat        = '&';
  plus                 = '+';
  minus                = '-';
  divide               = '/';
  multiply             = '*';
  gt                   = '>';
  gteq                 = '>=';
  eq                   = '=';

  colon                = ':';
  dot                  = '.';
  oparen               = '(';
  cparen               = ')';
  obrace               = '[';
  cbrace               = ']';
  semicolon            = ';';
  comma                = ',';
  assignment           = ':=';
  identifier           = (underscore | letter)(letter | digit | underscore)*;


  unterminated_string = quote valid_string* invalid_string*;
  illegal_string      = quote invalid_string* quote;
  illegal             = any_character;

Ignored Tokens
  space,
  comment,
  tab,
  line_continue;

Productions
 start                  = {classy} P.class_decl P.classes?
                        | {lines} T.new_line P.start;


 classes                =  P.class_decl P.classes?;

 class_decl             = class_head class_body P.class_end;

 class_head             = [cls]:T.class [class_name]:T.identifier class_inherits? T.is T.new_line+;
 class_inherits         = T.inherits T.from T.identifier;


 class_body             = P.var_decl* P.method_decl*;

 class_end              = T.end T.identifier T.new_line+;


 var_decl               = T.identifier type_decl [expr]:type_decl? T.new_line+;

 method_decl            = P.method_head P.method_body P.method_end;

 method_head            = T.identifier T.oparen P.arg_decl_list? T.cparen P.type_decl? T.is
                         T.new_line+
                         P.var_decl*;


 method_body            = T.begin T.new_line+ stmt_list;

 method_end              = T.end T.identifier T.new_line+;

 type_decl              = {type} T.colon P.type
                        | {expr} T.assignment P.expression;

 arg_decl_list          = T.identifier P.type_decl P.arg_list*;
 arg_list               = T.semicolon T.identifier P.type_decl;

 stmt                   = {if_stmt} P.if_stmt T.new_line+
                        | {assign_stmt} assign_stmt T.new_line+
                        | {loop_stmt} loop_stmt T.new_line+
                        | {call_stmt} call_stmt T.new_line+
                        ;


 call_stmt              = P.caller? T.identifier T.oparen P.expr_list T.cparen;

 loop_stmt              = T.loop T.while P.expression T.new_line+
                        stmt_list T.end [endloop]:T.loop;

 if_stmt                = T.if P.expression T.then T.new_line+
                          stmt_list else_stmt? T.end [end_if]:T.if;

 else_stmt              = T.else T.new_line+
                          stmt_list;


 assign_stmt            = T.identifier brace_expr* T.assignment P.expression;

 caller                 = P.expression_last T.dot;

 brace_expr             = T.obrace P.expression T.cbrace;



 stmt_list              = P.stmt* ;



 type                   = {int} T.int
                        | {bool} T.boolean
                        | {string} T.string
                        | {id} T.identifier
                        | {array} type T.obrace P.expression? T.cbrace;


 expr_list              = P.expression comma_expr*;

 comma_expr             = T.comma P.expression;

 expression             = {lvl6} expression_lvl6;

 expression_lvl6        = {or} expression_lvl6 T.logical_or expression_lvl5
                        | {pass} expression_lvl5
                        ;

 expression_lvl5        = {and} expression_lvl5 T.logical_and expression_lvl4
                         | {pass} expression_lvl4
                         ;

 expression_lvl4        =  {eq} [left]:expression_lvl3 T.eq [right]:expression_lvl3
                         | {gteq} [left]:expression_lvl3 T.gteq [right]:expression_lvl3
                         | {gt} [left]:expression_lvl3 T.gt [right]:expression_lvl3
                         | {pass} expression_lvl3
                         ;

 expression_lvl3        = {concat} expression_lvl3 T.string_concat expression_lvl2
                         | {pass} expression_lvl2
                         ;

 expression_lvl2        = {plus} expression_lvl2 T.plus expression_lvl1
                         | {minus} expression_lvl2 T.minus expression_lvl1
                         | {pass} expression_lvl1
                         ;

 expression_lvl1        = {multiply} expression_lvl1 T.multiply expression_lvl0
                         | {divide} expression_lvl1 T.divide expression_lvl0
                         | {pass} expression_lvl0
                         ;

 expression_lvl0        = {not} T.logical_not expression_lvl0
                        | {pos} T.plus expression_lvl0
                        | {neg} T.minus expression_lvl0
                        | {pass} expression_last
                         ;

 expression_last        =  {int} T.integer
                        | {id} T.identifier
                        | {string_lit} T.string_lit
                        | {true} T.true
                        | {false} T.false
                        | {null} T.null
                        | {me} T.me
                        | {parenth} T.oparen P.expression T.cparen
                        | {new} T.new P.type
                        | {array} T.identifier brace_expr+
                        | {methodcall} method_call_expr? T.identifier T.oparen P.expr_list? T.cparen
                        ;

 method_call_expr       = expression_last T.dot;